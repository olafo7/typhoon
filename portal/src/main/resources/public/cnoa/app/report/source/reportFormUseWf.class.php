<?php//decode by qq2859470class reportFormUseWf extends reportCommon{    protected $t_u_wffav = "report_u_wffav";    public function run( )    {        $task = getpar( $_GET, "task", getpar( $_POST, "task", "" ) );        switch ( $task )        {        case "loadPage" :            $this->_loadPage( );            break;        case "getSortList" :            $this->_getSortList( );            break;        case "getJsonData" :            $this->_getJsonData( );            break;        case "getBaseJsonData" :            $this->_getBaseJsonData( );            break;        case "getConditionJsonData" :            $this->_getConditionJsonData( );            break;        case "getSingleJsonData" :            $this->_getSingleJsonData( );            break;        case "submitCondition" :            $this->_submitCondition( );            break;        case "deleteCondition" :            $this->_deleteCondition( );            break;        case "getConJsonData" :            $this->_getConJsonData( );            break;        case "getTempleJsonData" :            $this->_getTempleJsonData( );        }    }    private function _loadPage( )    {        global $CNOA_SESSION;        global $CNOA_CONTROLLER;        $from = getpar( $_GET, "from", "" );    default :        switch ( $from )        {            $tplPath = $CNOA_CONTROLLER->appPath."/tpl/default/form/use/wf.htm";            break;        case "setting" :            $GLOBALS['GLOBALS']['report']['wf']['flowId'] = getpar( $_GET, "flowId", 0 );            $tplPath = $CNOA_CONTROLLER->appPath."/tpl/default/form/use/wf_setting.htm";            break;        case "temple" :            $GLOBALS['GLOBALS']['report']['wf']['flowId'] = getpar( $_GET, "flowId", 0 );            $tplPath = $CNOA_CONTROLLER->appPath."/tpl/default/form/use/wf_temple.htm";            break;        case "conlist" :            $tplPath = $CNOA_CONTROLLER->appPath."/tpl/default/form/use/wf_conlist.htm";            break;        case "templelist" :            $tplPath = $CNOA_CONTROLLER->appPath."/tpl/default/form/use/wf_templelist.htm";        }        $CNOA_CONTROLLER->loadExtraTpl( $tplPath );        exit( );    }    private function _getSortList( )    {        global $CNOA_DB;        global $CNOA_SESSION;        $uid = $CNOA_SESSION->get( "UID" );        include( CNOA_PATH."/app/wf/inc/wfNextStepData.class.php" );        $tree = app::loadapp( "wf", "flowUseNew" )->api_getSortList( "all", 0, FALSE );        echo json_encode( $tree );        exit( );    }    private function _getJsonData( )    {        global $CNOA_DB;        global $CNOA_SESSION;        $start = getpar( $_POST, "start", 0 );        $sortId = getpar( $_POST, "sortId", 0 );        $sort = getpar( $_POST, "sort", "" );        $flowName = getpar( $_POST, "flowName", "" );        $WHERE = "WHERE 1 ";        if ( $sort === "wffav" )        {            $this->__getWffavList( );            exit( );        }        if ( empty( $sortId ) )        {            $sortPermit = app::loadapp( "wf", "flowSetSort" )->api_getSortDB( "faqi" );            $sortPermitArr = array( 0 );            foreach ( $sortPermit as $v )            {                $sortPermitArr[] = $v['sortId'];            }            $WHERE .= "AND `sortId` IN (".implode( ",", $sortPermitArr ).") ";        }        else        {            $WHERE .= "AND `sortId`='".$sortId."' ";        }        if ( !empty( $flowName ) )        {            $WHERE .= "AND `name` LIKE '%".$flowName."%' ";        }        $dblist = $CNOA_DB->db_select( "*", $this->t_set_flow, $WHERE.( "AND `status` = 1 ORDER BY `flowId` DESC LIMIT ".$start.",{$this->rows}" ) );        if ( !is_array( $dblist ) )        {            $dblist = array( );        }        $sortArr = array( 0 );        $flowArr = array( 0 );        foreach ( $dblist as $k => $v )        {            $sortArr[] = $v['sortId'];            $flowArr[] = $v['flowId'];        }        $buildTimeDB = $CNOA_DB->db_select( array( "builddate", "flowid" ), $this->report_u_wf, "WHERE `flowid` IN (".implode( ",", $flowArr ).") " );        if ( !is_array( $buildTimeDB ) )        {            $buildTimeDB = array( );        }        foreach ( $buildTimeDB as $k => $v )        {            $buildTimeArr[$v['flowid']] = $v['builddate'];        }        $sortDB = $this->api_getSortByIds( $sortArr );        foreach ( $dblist as $k => $v )        {            $dblist[$k]['flowName'] = $v['name'];            $dblist[$k]['sname'] = $sortDB[$v['sortId']]['name'];            $dblist[$k]['about'] = $sortDB[$v['sortId']]['note'];            $dblist[$k]['buildtime'] = formatdate( $buildTimeArr[$v['flowId']], "Y-m-d H:i" );        }        ( );        $dataStore = new dataStore( );        $dataStore->data = $dblist;        $dataStore->total = $CNOA_DB->db_getCount( $this->t_set_flow, $WHERE."AND `status`='1' " );        echo $dataStore->makeJsonData( );        exit( );    }    private function _getBaseJsonData( )    {        global $CNOA_DB;        global $CNOA_SESSION;        $flowId = getpar( $_GET, "flowId", 0 );        $dblist = $CNOA_DB->db_select( "*", $this->report_u_wfbase, "WHERE `flowId` = '".$flowId."' " );        if ( !is_array( $dblist ) )        {            $dblist = array( );        }        $uidArr = array( 0 );        foreach ( $dblist as $k => $v )        {            $uidArr[] = $v['postuid'];        }        $trueNameDB = app::loadapp( "main", "user" )->api_getUserNamesByUids( $uidArr );        foreach ( $dblist as $k => $v )        {            if ( !empty( $v['definetime'] ) )            {                $definetime = json_decode( $v['definetime'], TRUE );                $dblist[$k] = array_merge( $dblist[$k], $definetime );            }            $dblist[$k]['postname'] = $trueNameDB[$v['postuid']]['truename'];        }        ( );        $ds = new dataStore( );        $ds->data = $dblist;        echo $ds->makeJsonData( );        exit( );    }    private function _getConditionJsonData( )    {        global $CNOA_DB;        global $CNOA_SESSION;        $flowId = getpar( $_GET, "flowId", 0 );        $bid = getpar( $_POST, "bid", 0 );        $dblist = $CNOA_DB->db_select( "*", $this->report_u_wfcondition, "WHERE `bid` = '".$bid."' ORDER BY `id` ASC " );        if ( empty( $dblist ) )        {            $normalDB = $CNOA_DB->db_select( "*", $this->t_set_field, "WHERE `flowId` = '".$flowId."' AND `otype` != 'signature' AND `otype` != 'detailtable' " );            $dblist = array( );            if ( !is_array( $normalDB ) )            {                $normalDB = array( );            }            foreach ( $normalDB as $k => $v )            {                $temp['fieldid'] = $v['id'];                $temp['fieldname'] = $v['name'];                $temp['from'] = 0;                $temp['condit'] = "无";                $temp['fid'] = 0;                $dblist[] = $temp;            }            $detailDB = $CNOA_DB->db_select( "*", $this->t_set_field_detail, "WHERE `flowId` = '".$flowId."' " );            $detail = array( );            if ( !is_array( $detailDB ) )            {                $detailDB = array( );            }            foreach ( $detailDB as $k => $v )            {                $temp['fieldid'] = $v['id'];                $temp['fieldname'] = $v['name'];                $temp['from'] = 1;                $temp['condit'] = "无";                $temp['fid'] = $v['fid'];                $dblist[] = $temp;            }        }        ( );        $ds = new dataStore( );        $ds->data = $dblist;        echo $ds->makeJsonData( );        exit( );    }    private function _getSingleJsonData( )    {        global $CNOA_DB;        $flowId = getpar( $_GET, "flowId", 0 );        $normalDB = $CNOA_DB->db_select( array( "id", "name" ), $this->t_set_field, "WHERE `flowId` = '".$flowId."' AND `otype` != 'signature' AND `odata` LIKE '%user_sel%' AND `otype` = 'choice' " );        if ( !is_array( $normalDB ) )        {            $normalDB = array( );        }        $dblist = array( );        foreach ( $normalDB as $k => $v )        {            $temp['fieldid'] = "T_".$v['id'];            $temp['fieldname'] = $v['name'];            $dblist[] = $temp;        }        $detailDB = $CNOA_DB->db_select( array( "id", "name" ), $this->t_set_field_detail, "WHERE `flowId` = '".$flowId."' AND `dataType` = 'user_sel' " );        if ( !is_array( $detailDB ) )        {            $detailDB = array( );        }        foreach ( $detailDB as $k => $v )        {            $temp['fieldid'] = "D_".$v['id'];            $temp['fieldname'] = $v['name'];            $dblist[] = $temp;        }        ( );        $ds = new dataStore( );        $ds->data = $dblist;        echo $ds->makeJsonData( );        exit( );    }    private function _submitCondition( )    {        global $CNOA_DB;        global $CNOA_SESSION;        $id = getpar( $_POST, "id", 0 );        $data['flowid'] = getpar( $_POST, "flowId", 0 );        $data['name'] = getpar( $_POST, "name", "" );        $data['type'] = getpar( $_POST, "type", "" );        $data['title'] = getpar( $_POST, "title", "" );        $data['number'] = getpar( $_POST, "number", "" );        $data['faqiuid'] = getpar( $_POST, "faqiuid", "" );        $data['faqiname'] = getpar( $_POST, "faqiname", "" );        $data['faqidept'] = getpar( $_POST, "faqidept", "" );        $data['faqideptname'] = getpar( $_POST, "faqideptname", "" );        $data['faqistation'] = getpar( $_POST, "faqistation", "" );        $data['faqistationname'] = getpar( $_POST, "faqistationname", "" );        $data['choice'] = getpar( $_POST, "choice", "" );        $data['timetype'] = getpar( $_POST, "timetype", 0 );        $data['postuid'] = $CNOA_SESSION->get( "UID" );        $data['singleField'] = getpar( $_POST, "singleField", "" );        if ( $data['timetype'] == 1 )        {            $definetime['dstime'] = getpar( $_POST, "dstime", 0 );            $definetime['gap'] = getpar( $_POST, "gap", 0 );            $definetime['dayMonthYear'] = getpar( $_POST, "dayMonthYear", 0 );            $definetime['day'] = getpar( $_POST, "day", 0 );            $data['definetime'] = json_encode( $definetime );            $data['stime'] = 0;            $data['etime'] = 0;        }        else if ( $data['timetype'] == 2 )        {            $data['stime'] = strtotime( getpar( $_POST, "stime", "" ) );            $data['etime'] = strtotime( getpar( $_POST, "etime", "" ) );        }        else        {            $data['stime'] = 0;            $data['etime'] = 0;        }        if ( empty( $id ) )        {            $num = $CNOA_DB->db_getcount( $this->report_u_wfbase, "WHERE `flowid` = '".$data['flowid']."' AND `name` = '{$data['name']}' " );            if ( empty( $num ) )            {                $id = $CNOA_DB->db_insert( $data, $this->report_u_wfbase );            }            else            {                msg::callback( FALSE, lang( "nameExist" ) );            }        }        else        {            $num = $CNOA_DB->db_getcount( $this->report_u_wfbase, "WHERE `flowid` = '".$data['flowid']."' AND `name` = '{$data['name']}' AND `id` != '{$id}' " );            if ( empty( $num ) )            {                $CNOA_DB->db_update( $data, $this->report_u_wfbase, "WHERE `id` = '".$id."' AND `postuid` = '{$data['postuid']}' " );            }            else            {                msg::callback( FALSE, lang( "nameExist" ) );            }        }        $this->__submitConditionChild( $id );        msg::callback( TRUE, lang( "successopt" ) );    }    private function __submitConditionChild( $bid )    {        global $CNOA_DB;        $children = getpar( $_POST, "children", "" );        $children = json_decode( htmlspecialchars_decode( $children ), TRUE );        $CNOA_DB->db_delete( $this->report_u_wfcondition, "WHERE `bid` = '".$bid."' " );        $data['bid'] = $bid;        foreach ( $children as $k => $v )        {            $data['fieldid'] = $v['fieldid'];            $data['fieldname'] = $v['fieldname'];            $data['condit'] = $v['condit'];            $data['value'] = $v['value'];            $data['from'] = $v['from'];            $data['fid'] = $v['fid'];            $CNOA_DB->db_insert( $data, $this->report_u_wfcondition );        }        return TRUE;    }    private function _deleteCondition( )    {        global $CNOA_DB;        $id = getpar( $_GET, "id", 0 );        $CNOA_DB->db_delete( $this->report_u_wfbase, "WHERE `id` = '".$id."' " );        $CNOA_DB->db_delete( $this->report_u_wfcondition, "WHERE `bid` = '".$id."' " );        msg::callback( TRUE, lang( "successopt" ) );    }    private function _setDefaults( )    {        global $CNOA_DB;        $id = getpar( $_GET, "id", 0 );        $type = getpar( $_POST, "type", "" );        $data['defaults'] = 0;        if ( $type == "set" )        {            $data['defaults'] = 1;        }        $CNOA_DB->db_update( $data, $this->report_u_wfbase, "WHERE `id` = '".$id."' " );        msg::callback( TRUE, lang( "successopt" ) );    }    private function _getConJsonData( )    {        global $CNOA_DB;        global $CNOA_SESSION;        $uid = $CNOA_SESSION->get( "UID" );        $start = getpar( $_POST, "start", 0 );        $s_name = getpar( $_POST, "name", "" );        $WHERE = "WHERE 1 ";        if ( !empty( $s_name ) )        {            $WHERE .= "AND `name` LIKE '%".$s_name."%' ";        }        $dblist = $CNOA_DB->db_select( array( "name", "id", "flowid" ), $this->report_u_wfbase, $WHERE.( "AND `postuid` = '".$uid."' ORDER BY `id` DESC LIMIT {$start}, {$this->rows} " ) );        if ( !is_array( $dblist ) )        {            $dblist = array( );        }        $flowidArr = array( 0 );        foreach ( $dblist as $k => $v )        {            $flowidArr[] = $v['flowid'];        }        $flowDB = $CNOA_DB->db_select( array( "name", "flowId" ), $this->t_set_flow, "WHERE `flowId` IN (".implode( ",", $flowidArr ).") " );        if ( !is_array( $flowDB ) )        {            $flowDB = array( );        }        foreach ( $flowDB as $k => $v )        {            $flowArr[$v['flowId']] = $v['name'];        }        foreach ( $dblist as $k => $v )        {            $dblist[$k]['flowName'] = $flowArr[$v['flowid']];        }        ( );        $ds = new dataStore( );        $ds->data = $dblist;        $ds->total = $CNOA_DB->db_getcount( $this->report_u_wfbase, $WHERE.( "AND `postuid` = '".$uid."' " ) );        echo $ds->makeJsonData( );        exit( );    }    private function _getTempleJsonData( )    {        global $CNOA_DB;        global $CNOA_SESSION;        $uid = $CNOA_SESSION->get( "UID" );        $start = getpar( $_POST, "start", 0 );        $s_name = getpar( $_POST, "name", "" );        $WHERE = "WHERE 1 ";        if ( !empty( $s_name ) )        {            $WHERE .= "AND `name` LIKE '%".$s_name."%' ";        }        $dblist = $CNOA_DB->db_select( array( "condition", "fromid", "name" ), $this->report_temple, $WHERE.( "AND `postuid` = '".$uid."' ORDER BY `tid` DESC LIMIT {$start}, {$this->rows} " ) );        if ( !is_array( $dblist ) )        {            $dblist = array( );        }        $conArr = array( 0 );        $flowidArr = array( 0 );        foreach ( $dblist as $k => $v )        {            $conArr[] = $v['condition'];            $flowidArr[] = $v['fromid'];        }        $conDB = $CNOA_DB->db_select( array( "name", "id" ), $this->report_u_wfbase, "WHERE `id` IN (".implode( ",", $conArr ).") " );        if ( !is_array( $conDB ) )        {            $conDB = array( );        }        foreach ( $conDB as $k => $v )        {            $conArr[$v['id']] = $v['name'];        }        $flowDB = $CNOA_DB->db_select( array( "name", "flowId" ), $this->t_set_flow, "WHERE `flowId` IN (".implode( ",", $flowidArr ).") " );        if ( !is_array( $flowDB ) )        {            $flowDB = array( );        }        foreach ( $flowDB as $k => $v )        {            $flowArr[$v['flowId']] = $v['name'];        }        foreach ( $dblist as $k => $v )        {            $dblist[$k]['conName'] = $conArr[$v['condition']];            $dblist[$k]['flowName'] = $flowArr[$v['fromid']];        }        ( );        $ds = new dataStore( );        $ds->data = $dblist;        $ds->total = $CNOA_DB->db_getcount( $this->report_temple, $WHERE.( "AND `postuid` = '".$uid."' " ) );        echo $ds->makeJsonData( );        exit( );    }    private function __formatFileName( $rule, $fname )    {        $rule = str_replace( "<L>", $fname, $rule );        $rule = str_replace( "<Y>", date( "Y", $GLOBALS['CNOA_TIMESTAMP'] ), $rule );        $rule = str_replace( "<M>", date( "m", $GLOBALS['CNOA_TIMESTAMP'] ), $rule );        $rule = str_replace( "<D>", date( "d", $GLOBALS['CNOA_TIMESTAMP'] ), $rule );        $rule = str_replace( "<H>", date( "H", $GLOBALS['CNOA_TIMESTAMP'] ), $rule );        $rule = str_replace( "<I>", date( "i", $GLOBALS['CNOA_TIMESTAMP'] ), $rule );        return $rule;    }    private function __formatCondit( $fieldid, $type, $value )    {        switch ( $type )        {        case "包含" :            return " AND `".$fieldid.( "` LIKE '%".$value."%' " );        case "不包含" :            return " AND `".$fieldid.( "` NOT LIKE '%".$value."%' " );        case "开始为" :            return " AND `".$fieldid.( "` LIKE '".$value."%' " );        case "结束为" :            return " AND `".$fieldid.( "` LIKE '%".$value."' " );        case "等于" :            return " AND `".$fieldid.( "` = '".$value."' " );        case "大于等于" :            return " AND `".$fieldid.( "` >= '".$value."' " );        case "小于等于" :            return " AND `".$fieldid.( "` <= '".$value."' " );        case "大于" :            return " AND `".$fieldid.( "` > '".$value."' " );        case "小于" :            return " AND `".$fieldid.( "` < '".$value."' " );        }        return "";    }}?>