<?php//decode by qq2859470class userAttendanceOvertime extends userAttendance{    public function run( )    {        $task = getpar( $_GET, "task" );        switch ( $task )        {        case "getOvertime" :            $this->_getOvertime( );            break;        case "getVerifier" :            $this->_getVerifier( );            break;        case "addOvertime" :            $this->_addOvertime( );            break;        case "editOvertime" :            $this->_editOvertime( );            break;        case "getOvertimeList" :            $this->_getOvertimeList( );            break;        case "delOvertime" :            $this->_delOvertime( );            break;        case "updateOvertime" :            $this->_updateOvertime( );        }    }    private function _getOvertime( )    {        global $CNOA_DB;        global $CNOA_SESSION;        $uid = $CNOA_SESSION->get( "UID" );        $id = getpar( $_POST, "id", 0 );        $data = array( );        if ( 0 < $id )        {            $infos = $CNOA_DB->db_getone( "*", $this->table_overtime, "WHERE `uid`=".$uid." AND `id`={$id}" );            $data['verifier'] = $infos['vid'];            $data['stime'] = date( "Y-m-d H:i:s", $infos['stime'] );            $data['etime'] = date( "Y-m-d H:i:s", $infos['etime'] );            $data['reason'] = $infos['reason'];        }        ( );        $dataStore = new dataStore( );        $dataStore->data = $data;        echo $dataStore->makeJsonData( );        exit( );    }    private function _addOvertime( )    {        global $CNOA_DB;        global $CNOA_SESSION;        $uid = $CNOA_SESSION->get( "UID" );        $vid = getpar( $_POST, "verifier" );        $stime = getpar( $_POST, "stime" );        $etime = getpar( $_POST, "etime" );        $reason = getpar( $_POST, "reason" );        $stime = strtotime( $stime );        $etime = strtotime( $etime );        $now_time = strtotime( date( "Y-m-d H:i:s" ) );        if ( $etime - $stime < 0 )        {            msg::callback( FALSE, "结束时间不能小于开始时间" );        }        $insert = array( );        $insert['uid'] = $uid;        $insert['vid'] = $vid;        $insert['stime'] = $stime;        $insert['etime'] = $etime;        $insert['reason'] = $reason;        $insert['posttime'] = $now_time;        $insert['ip'] = getip( );        $noticeT = "有“加班登记”需要您审批";        $noticeC = "点击“查看详细”即可前去查看登记信息.";        $noticeH = "index.php?app=hr&func=attendance&action=check";        $insert['noticeid_c'] = notice::add( $vid, $noticeT, $noticeC, $noticeH, 0, 15 );        $notice['touid'] = $vid;        $notice['from'] = 15;        $notice['fromid'] = 0;        $notice['href'] = $noticeH;        $notice['title'] = $noticeT;        $notice['content'] = "原因:".$reason;        $notice['funname'] = "个人加班管理";        $notice['move'] = "审批 ";        $insert['todoid_c'] = notice::add2( $notice );        $CNOA_DB->db_insert( $insert, $this->table_overtime );        app::loadapp( "main", "systemLogs" )->api_addLogs( "add", 2302, NULL, "记录" );        msg::callback( TRUE, lang( "successopt" ) );    }    private function _editOvertime( )    {        global $CNOA_DB;        global $CNOA_SESSION;        $uid = $CNOA_SESSION->get( "UID" );        $id = getpar( $_POST, "id" );        $vid = getpar( $_POST, "verifier" );        $stime = getpar( $_POST, "stime" );        $etime = getpar( $_POST, "etime" );        $reason = getpar( $_POST, "reason" );        $stime = strtotime( $stime );        $etime = strtotime( $etime );        $now_time = strtotime( date( "Y-m-d H:i:s" ) );        if ( $etime - $stime < 0 )        {            msg::callback( FALSE, "结束时间不能小于开始时间" );        }        $update = array( );        $update['uid'] = $uid;        $update['vid'] = $vid;        $update['stime'] = $stime;        $update['etime'] = $etime;        $update['reason'] = $reason;        $update['posttime'] = $now_time;        $update['ip'] = getip( );        $update['status'] = 0;        $update['oreason'] = "";        $temp = $CNOA_DB->db_getone( array( "noticeid_c", "todoid_c" ), $this->table_overtime, "WHERE `uid`=".$uid." AND `id`={$id}" );        notice::deletenoticebyid( $temp['noticeid_c'] );        notice::deletenoticebyid2( $temp['todoid_c'] );        $noticeT = "有“加班登记”需要您审批";        $noticeC = "点击“查看详细”即可前去查看登记信息.";        $noticeH = "index.php?app=hr&func=attendance&action=check";        $update['noticeid_c'] = notice::add( $vid, $noticeT, $noticeC, $noticeH, 0, 15 );        $notice['touid'] = $vid;        $notice['from'] = 15;        $notice['fromid'] = $id;        $notice['href'] = $noticeH;        $notice['title'] = $noticeT;        $notice['content'] = "原因:".$reason;        $notice['funname'] = "个人加班管理";        $notice['move'] = "审批 ";        $update['todoid_c'] = notice::add2( $notice );        $CNOA_DB->db_update( $update, $this->table_overtime, "WHERE `uid`=".$uid." AND `id`={$id}" );        app::loadapp( "main", "systemLogs" )->api_addLogs( "update", 2302, NULL, "记录" );        msg::callback( TRUE, lang( "successopt" ) );    }    public function __getOvertimeList( $where = "" )    {        global $CNOA_DB;        $start = getpar( $_POST, "start", 0 );        $dblist = $CNOA_DB->db_select( "*", $this->table_overtime, $where.( " ORDER BY `id` DESC LIMIT ".$start.", {$this->rows}" ) );        if ( !is_array( $dblist ) )        {            $dblist = array( );        }        $data = array( );        foreach ( $dblist as $tmp )        {            $info =& $data[];            $info = $tmp;            $info['posttime'] = formatdate( $tmp['posttime'], "Y-m-d H:i" );            $info['stime'] = formatdate( $tmp['stime'], "Y-m-d H:i" );            $info['etime'] = formatdate( $tmp['etime'], "Y-m-d H:i" );            $info['otime'] = formatdate( $tmp['otime'], "Y-m-d H:i" );            $info['verifier'] = app::loadapp( "main", "user" )->api_getUserTruenameByUid( $tmp['vid'] );            $time = timeformat3( $tmp['stime'], $tmp['etime'] );            $info['hour'] = $time['hour'];            $info['minute'] = $time['minute'];            $info['oetime'] = formatdate( $tmp['otime'], "Y-m-d H:i" );        }        return $data;    }    private function _getOvertimeList( )    {        global $CNOA_DB;        global $CNOA_SESSION;        $uid = $CNOA_SESSION->get( "UID" );        $status = getpar( $_POST, "status", -1 );        $where = "WHERE `uid`=".$uid;        if ( 0 <= $status )        {            $where .= " AND `status`=".$status." ";        }        $data = $this->__getOvertimeList( $where );        ( );        $dataStore = new dataStore( );        $dataStore->data = $data;        $dataStore->total = $CNOA_DB->db_getcount( $this->table_overtime, $where );        echo $dataStore->makeJsonData( );        exit( );    }    private function _delOvertime( )    {        global $CNOA_DB;        global $CNOA_SESSION;        $uid = $CNOA_SESSION->get( "UID" );        $ids = getpar( $_POST, "ids" );        if ( $ids )        {            $ids = explode( ",", substr( $ids, 0, -1 ) );            if ( is_array( $ids ) )            {                foreach ( $ids as $v )                {                    $DB = $CNOA_DB->db_getone( array( "todoid_c", "noticeid_c" ), $this->table_overtime, "WHERE `uid` = '".$uid."' AND `id` = '{$v}' " );                    notice::deletenotice( $DB['noticeid_c'], $DB['todoid_c'] );                    $CNOA_DB->db_delete( $this->table_overtime, "WHERE `uid`=".$uid." AND `id`='{$v}'" );                }            }        }        app::loadapp( "main", "systemLogs" )->api_addLogs( "del", 2302, NULL, "记录" );        msg::callback( TRUE, lang( "successopt" ) );    }    private function _updateOvertime( )    {        global $CNOA_DB;        global $CNOA_SESSION;        $uid = $CNOA_SESSION->get( "UID" );        $id = getpar( $_POST, "id" );        $status = getpar( $_POST, "status" );        $stime = $CNOA_DB->db_getfield( "stime", $this->table_overtime, "WHERE `uid`=".$uid." AND `id`={$id}" );        $hours = time( ) - intval( $stime );        $update = array( );        $update['status'] = 3;        $update['otime'] = time( );        $update['hour'] = $hours;        if ( intval( $status ) == 2 )        {            $update['status'] = 5;        }        $user = $CNOA_DB->db_getone( array( "vid", "noticeid_a", "todoid_a" ), $this->table_overtime, "WHERE `id`=".$id );        notice::donen( $user['noticeid_a'] );        notice::donet( $user['todoid_a'] );        $truename = app::loadapp( "main", "user" )->api_getUserTruenameByUid( $uid );        $noticeC = "“".$truename."”加班结束，请您核实.";        if ( intval( $status ) == 2 )        {            $noticeC = "“".$truename."”申请注销加班登记，请您审批.";        }        $noticeT = "加班管理";        $noticeH = "index.php?app=hr&func=attendance&action=check";        $update['noticeid_c'] = notice::add( $user['vid'], $noticeT, $noticeC, $noticeH, 0, 15 );        $notice['touid'] = $user['vid'];        $notice['from'] = 15;        $notice['fromid'] = $id;        $notice['href'] = $noticeH;        $notice['title'] = $noticeC;        $notice['content'] = "";        $notice['funname'] = "加班管理";        $notice['move'] = "审批 ";        $update['todoid_c'] = notice::add2( $notice );        $CNOA_DB->db_update( $update, $this->table_overtime, "WHERE `uid`=".$uid." AND `id`={$id}" );        app::loadapp( "main", "systtemLogs" )->api_addLogs( "update", 2302, "加班登记状态" );        msg::callback( TRUE, lang( "successopt" ) );    }    private function _getVerifier( )    {        global $CNOA_DB;        $userNames = array( );        $uids = $CNOA_DB->db_getfield( "approverUid", $this->table_setting_approver, "WHERE id=1" );        if ( !empty( $uids ) )        {            $userNames = app::loadapp( "main", "user" )->api_getUserNamesByUids( explode( ",", $uids ) );            $userNames = array_merge( $userNames );        }        ( );        $dataStore = new dataStore( );        $dataStore->data = $userNames;        echo $dataStore->makeJsonData( );        exit( );    }    public function api_getOvertimeList( $where )    {        return $this->__getOvertimeList( $where );    }}?>