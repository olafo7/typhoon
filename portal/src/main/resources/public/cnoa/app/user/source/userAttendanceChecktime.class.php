<?php//decode by qq2859470class userAttendanceChecktime extends userAttendance{    public function run( )    {        $task = getpar( $_GET, "task" );        switch ( $task )        {        case "getChecktime" :            $this->_getChecktime( );            break;        case "addChecktime" :            $this->_addChecktime( );            break;        case "getChecktime4Widgts" :            $this->_getChecktime4Widgts( );            break;        case "editChecktimeExplain" :            $this->_editChecktimeExplain( );        }    }    private function _getChecktime( $isReturn = FALSE )    {        global $CNOA_DB;        global $CNOA_SESSION;        $uid = $CNOA_SESSION->get( "UID" );        $userInfo = app::loadapp( "main", "user" )->api_getUserDataByUid( $uid );        $cid = $userInfo['worktimeId'];        app::loadapp( "hr", "attendance" )->api_initSetting( );        $where = "WHERE `uid`=".$uid." AND `status`=1";        $lcount = app::loadapp( "user", "attendanceLeave" )->api_getLeaveCount( $where );        if ( 0 < $lcount && !$isReturn )        {            msg::callback( FALSE, lang( "PleasesickLeave" ) );        }        $dblist = app::loadapp( "hr", "attendance" )->api_getVacationList( "" );        $lcount = 0;        $cdate = date( "Y-m-d" );        $arrVacation = array( );        foreach ( $dblist as $dbinfo )        {            $stime = $dbinfo['begindate'];            $startTime = date( "Y-m-d", $stime );            $etime = $dbinfo['enddate'];            if ( $stime == $etime )            {                $arrVacation[] = $startTime;            }            else            {                $time = ( $etime - $stime ) / 86400;                $i = 0;                for ( ; $i <= $time; ++$i )                {                    if ( $stime <= $etime )                    {                        $arrVacation[] = $startTime;                    }                    $stime = strtotime( "+24 hours", $stime );                    $startTime = date( "Y-m-d", $stime );                }            }        }        if ( in_array( $cdate, $arrVacation ) )        {            msg::callback( FALSE, lang( "todayHoliday" ) );        }        $return = app::loadapp( "hr", "attendance" )->api_getSettingWorktime( $cid );        $infos = json_decode( $return );        $date = date( "Y-m-d" );        $dblist = $CNOA_DB->db_select( "*", $this->table_checktime, "WHERE `cid`=".$cid." AND `uid`={$uid} AND `date`='{$date}'" );        if ( !is_array( $dblist ) )        {            $dblist = array( );        }        $i = 0;        foreach ( $infos->data as $v )        {            $data =& $infos->data[$i];            $data->recTime = "";            $data->recExplain = "";            $data->recType = 0;            $data->checked = 0;            $onbeforetime = $infos->onbeforetime;            $onaftertime = $infos->onaftertime;            $offbeforetime = $infos->offbeforetime;            $offaftertime = $infos->offaftertime;            $time = strtotime( $data->time );            reset( &$dblist );            foreach ( $dblist as $v2 )            {                if ( $v->cnum == $v2['cnum'] )                {                    $data->recTime = $v2['time'];                    $data->recExplain = $v2['explain'];                    $recTime = strtotime( $v2['time'] );                    if ( $data->type == 0 )                    {                        if ( $time < $recTime )                        {                            $data->recType = 1;                        }                    }                    else if ( $recTime < $time )                    {                        $data->recType = 2;                    }                }            }            switch ( $data->type )            {            case 0 :                $beforetime = strtotime( "-".$onbeforetime." minutes", $time );                $aftertime = strtotime( "+".$onaftertime." minutes", $time );                break;            case 1 :                $beforetime = strtotime( "-".$offbeforetime." minutes", $time );                $aftertime = strtotime( "+".$offaftertime." minutes", $time );            }            $now_time = strtotime( date( "Y-m-d H:i:s" ) );            if ( $beforetime <= $now_time && $now_time <= $aftertime )            {                $data->checked = 1;            }            ++$i;        }        if ( $isReturn )        {            return array(                $infos,                $return,                $cid            );        }        echo json_encode( $infos );        exit( );    }    private function _addChecktime( )    {        global $CNOA_DB;        global $CNOA_SESSION;        $uid = $CNOA_SESSION->get( "UID" );        $cid = getpar( $_POST, "cid" );        $num = getpar( $_POST, "num" );        $this->__addChecktime( $uid, $cid, $num );        msg::callback( TRUE, lang( "successopt" ) );    }    private function _editChecktimeExplain( )    {        global $CNOA_DB;        global $CNOA_SESSION;        $cid = getpar( $_POST, "cid" );        $num = getpar( $_POST, "cnum" );        $explain = getpar( $_POST, "explain" );        $uid = $CNOA_SESSION->get( "UID" );        $date = date( "Y-m-d" );        $where = "WHERE `cid`=".$cid." AND `uid`={$uid} AND `date`='{$date}' AND `cnum`={$num}";        $count = $CNOA_DB->db_getcount( $this->table_checktime, $where );        $data = array( );        $data['explain'] = $explain;        if ( 0 < $count )        {            $CNOA_DB->db_update( $data, $this->table_checktime, $where );        }        else        {            $data['uid'] = $uid;            $data['cid'] = $cid;            $data['cnum'] = $num;            $data['date'] = $date;            $data['numDate'] = date( "Ymd" );            $data['ip'] = getip( );            $CNOA_DB->db_insert( $data, $this->table_checktime );        }        msg::callback( TRUE, lang( "successopt" ) );        exit( );    }    private function __addChecktime( $uid, $cid, $num )    {        global $CNOA_DB;        global $CNOA_SESSION;        $date = date( "Y-m-d" );        $time = date( "H:i:s" );        $uid = $CNOA_SESSION->get( "UID" );        $userInfo = app::loadapp( "main", "user" )->api_getUserDataByUid( $uid );        $ctInfo = app::loadapp( "hr", "attendance" )->api_getChecktimeInfo( );        $hasBindIP = $ctInfo['bindIP'];        if ( 0 < intval( $hasBindIP ) )        {            if ( empty( $userInfo['bindIP'] ) )            {                msg::callback( FALSE, lang( "youIpNotBinding" ) );            }            $curIP = getip( );            $userIP = $userInfo['bindIP'];            if ( trim( $curIP ) != trim( $userIP ) )            {                msg::callback( FALSE, lang( "ipCurrentIPnotComply" ) );            }        }        $wt = app::loadapp( "hr", "attendanceSetting" )->api_getSettingWorktime( $cid );        $wt = json_decode( $wt );        $wtInfo = $wt->data[$num - 1];        $wtTime = $wtInfo->time;        if ( $wtInfo->type == 0 )        {            $stime = $wt->onbeforetime;            $etime = $wt->onaftertime;        }        else        {            $stime = $wt->offbeforetime;            $etime = $wt->offaftertime;        }        $wtTime = strtotime( $date." ".$wtTime );        $stime = strtotime( "-".$stime." minutes", $wtTime );        $etime = strtotime( "+".$etime." minutes", $wtTime );        $now_time = time( );        if ( $now_time < $stime || $etime < $now_time )        {            msg::callback( FALSE, lang( "hiRegTimeElapse" ) );        }        $db_count = $CNOA_DB->db_getcount( $this->table_checktime, "WHERE `cid`=".$cid." AND `cnum`={$num} AND `date`='{$date}' AND `uid`={$uid}" );        if ( 0 < $db_count )        {            msg::callback( FALSE, lang( "doNotSubmit" ) );        }        $insert = array( );        $insert['cid'] = $cid;        $insert['cnum'] = $num;        $insert['date'] = $date;        $insert['numDate'] = date( "Ymd" );        $insert['time'] = $time;        $insert['uid'] = $uid;        $insert['ip'] = getip( );        $CNOA_DB->db_insert( $insert, $this->table_checktime );    }    public function _getChecktime4Widgts( )    {        global $CNOA_DB;        global $CNOA_SESSION;        $uid = $CNOA_SESSION->get( "UID" );        $deptid = $CNOA_SESSION->get( "DID" );        $monthstarttime = strtotime( date( "Y-m-01 00:00:00", $GLOBALS['CNOA_TIMESTAMP'] ) );        $jq = $this->_getChecktime( TRUE );        $pb = json_decode( $jq[1], TRUE );        $paiban = array( );        $todayPaibanNum = 0;        foreach ( $pb['data'] as $v )        {            $paiban[$v['cnum']] = $v;            $pbtime = str_replace( ":", "", $v['time'] );            $nowtime = date( "His", $GLOBALS['CNOA_TIMESTAMP'] );            if ( $pbtime < $nowtime )            {                ++$todayPaibanNum;            }        }        unset( $v );        unset( $pbtime );        unset( $nowtime );        $workDate = $this->__getWorkDateCount( $pb['restDay'] ) - 1;        $qjc = $workDate * count( $pb['data'] ) + $todayPaibanNum;        $today = date( "Y-m-01", $GLOBALS['CNOA_TIMESTAMP'] );        $todayNum = date( "Ym01", $GLOBALS['CNOA_TIMESTAMP'] );        $checkData = $CNOA_DB->db_select( "*", $this->table_checktime, "WHERE `uid`='".$uid."' AND `numDate`>={$todayNum}" );        if ( !is_array( $checkData ) )        {            $checkData = array( );        }        $belate = 0;        $leaved = 0;        foreach ( $checkData as $v )        {            $sCkTime = strtotime( $v['date']." ".$paiban[$v['cnum']]['time'] );            $eCkTime = strtotime( $v['date']." ".$v['time'] );            if ( $paiban[$v['cnum']]['type'] == 0 )            {                if ( $sCkTime < $eCkTime )                {                    ++$belate;                }            }            else if ( $eCkTime < $sCkTime )            {                ++$leaved;            }        }        $c_egression = $CNOA_DB->db_getcount( "user_attendance_egression", "WHERE `status` IN (1,3,4) AND `uid`='".$uid."' AND `stime`>=".$monthstarttime );        $c_leave = $CNOA_DB->db_getcount( "user_attendance_leave", "WHERE `status` IN (1,3,4) AND `uid`='".$uid."' AND `stime`>=".$monthstarttime );        $c_evection = $CNOA_DB->db_getcount( "user_attendance_evection", "WHERE `status` IN (1,3,4) AND `uid`='".$uid."' AND `stime`>=".$monthstarttime );        $data = json_decode( json_encode( $jq[0] ), TRUE );        $data['belate'] = $belate;        $data['leaved'] = $leaved;        $data['allcktimes'] = $qjc - count( $checkData );        $data['c_egression'] = $c_egression;        $data['c_evection'] = $c_evection;        $data['c_leave'] = $c_leave;        echo json_encode( $data );        exit( );    }    private function __getWorkDateCount( $jq )    {        global $CNOA_DB;        global $CNOA_SESSION;        $uid = $CNOA_SESSION->get( "UID" );        $userDB = app::loadapp( "main", "user" )->api_getUserInfoByUid( $uid );        $sdate = $sdate2 = strtotime( date( "Y-m-01 00:00:00", time( ) ) );        if ( $sdate < $userDB['regtime'] )        {            $sdate = $userDB['regtime'];            $sdate2 = $userDB['regtime'];        }        $edate = time( );        $x = 0;        while ( $sdate < $edate )        {            $i = 0;            for ( ; $i < strlen( $jq ); ++$i )            {                if ( date( "w", $sdate ) == intval( $jq[$i] ) )                {                    ++$x;                }            }            $sdate += 86400;        }        return ceil( ( $edate - $sdate2 ) / 86400 ) - $x;    }    public function api_addChecktime( $uid, $cid, $num )    {        $this->__addChecktime( $uid, $cid, $num );    }    public function api_isVacation( )    {        $dblist = app::loadapp( "hr", "attendance" )->api_getVacationList( "" );        $isVacation = FALSE;        $lcount = 0;        $cdate = date( "Y-m-d" );        foreach ( $dblist as $dbinfo )        {            $stime = $dbinfo['begindate'];            $stime = date( "Y-m-d", $stime );            $etime = $dbinfo['enddate'];            $arrTime2 = array( );            do            {                $w = count( $arrTime2 );                if ( 0 < $w )                {                    $time = $arrTime2[$w - 1];                }                else                {                    $time = $stime;                    $s = date( "Y-m-d", strtotime( $stime ) );                    $arrTime2[] = $s;                }                $time = strtotime( $time );                $s = strtotime( "+24 hours", $time );                $ss = date( "Y-m-d", $s );                $arrTime2[] = $ss;                if ( $ss == $cdate )                {                    $isVacation = TRUE;                }            } while ( 1 );        }        return $isVacation;    }}?>