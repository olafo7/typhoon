<?php//decode by qq2859470class assetsAssetsAssetsmanagement extends assetsAssets{    public function run( )    {        $task = getpar( $_GET, "task" );        switch ( $task )        {        case "loadPage" :            $this->_loadpage( );            exit( );        case "getComboStore" :            $this->_getComboStore( );            exit( );        case "addAssets" :            $this->_addassets( );            exit( );        case "delAssets" :            $this->_delassets( );            exit( );        case "getStatus" :            $this->_getStatus( );            exit( );        case "getCustomField" :            $this->_getAssetsField( );            exit( );        case "getCustomList" :            $this->_getAssetsList( );            exit( );        case "getSortList" :            $this->_getSortList( );            exit( );        case "viewAssets" :            $this->_viewassets( );            exit( );        case "getPhotoList" :            $this->_getPhotoList( );            exit( );        case "upPhoto" :            $this->_upPhoto( );            exit( );        case "getOnePhoto" :            $this->_getOnePhoto( );            exit( );        case "delPhoto" :            $this->_delPhoto( );            exit( );        case "exportExcel" :            $this->_exportExcel( );            exit( );        case "getFacilityList" :            $this->_getfacilitylist( );            exit( );        case "addFacility" :            $this->_addfacility( );            exit( );        case "editFacility" :            $this->_editfacility( );            exit( );        case "delFacility" :            $this->_delfacility( );            exit( );        case "comboStore" :            $this->_comboStore( );            exit( );        case "import_assets" :            $step = getpar( $_GET, "step", "" );            if ( $step == "insert" )            {                $this->_import_assets_insert( );                exit( );            }            if ( $step == "upload" )            {                new importExcel( );                ( $step );                exit( );            }            global $CNOA_DB;            $file = CNOA_PATH."/resources/import/map/maptable_assets.php";            if ( file_exists( $file ) )            {                $options = include( $file );            }            $result = $CNOA_DB->db_select( array( "fieldid", "fieldname" ), $this->table_custom );            if ( !is_array( $result ) )            {                $result = array( );            }            foreach ( $result as $key => $value )            {                $options["field".$value['fieldid']] = $value['fieldname'];            }            new importExcel( );            ( $step, "", $options );        }        exit( );    }    private function _loadpage( )    {        global $CNOA_CONTROLLER;        $tplPath = $CNOA_CONTROLLER->appPath."/tpl/default/assets/assetsmanagement.htm";        $CNOA_CONTROLLER->loadExtraTpl( $tplPath );    }    private function getXtypeByFieldtype( $fieldtype )    {        $fieldtype = intval( $fieldtype );        switch ( $fieldtype )        {        case self::FIELD_TYPE_TEXT :            return "textfield";        case self::FIELD_TYPE_TEXTAREA :            return "textarea";        case self::FIELD_TYPE_INT :        case self::FIELD_TYPE_REAL :            return "numberfield";        case self::FIELD_TYPE_DATA :            return "datefield";        case self::FIELD_TYPE_COMBO :            return "combo";        case self::FIELD_TYPE_USER :            return "user";        case self::FIELD_TYPE_CHECKBOX :            return "checkbox";        case self::FIELD_TYPE_DEPT :            return "dept";        }    }    private function getSortName( $sortid )    {        global $CNOA_DB;        return $CNOA_DB->db_getfield( "name", $this->table_sort, "WHERE id = ".$sortid );    }    private function getDropValue( $id )    {        global $CNOA_DB;        if ( empty( $id ) )        {            return FALSE;        }        return $CNOA_DB->db_getfield( "value", $this->table_dropdown, "WHERE id = ".$id );    }    private function getDropType( $key )    {        switch ( $key )        {        case "measure" :            return self::DROPDOWN_TYPE_UNIT;        case "source" :            return self::DROPDOWN_TYPE_SOURCE;        case "way" :            return self::DROPDOWN_TYPE_WAY;        case "storage" :            return self::DROPDOWN_TYPE_PLACE;        case "manufactuer" :            return self::DROPDOWN_TYPE_MANUFACTUER;        case "supplier" :            return self::DROPDOWN_TYPE_SUPPLIER;        case "residuals" :            return self::DROPDOWN_TYPE_RESIDUALS;        }    }    private function _getComboStore( )    {        $key = getpar( $_POST, "key" );        $str = substr( $key, 0, 5 );        if ( $str == "field" )        {            $this->_getCustomDrop( $key );        }        else        {            $dropType = $this->getDropType( $key );            $this->_getdrop( $dropType );        }    }    protected function _getdrop( $type )    {        global $CNOA_DB;        $data = $CNOA_DB->db_select( array( "id", "value" ), $this->table_dropdown, "where `type`='".$type."'" );        if ( !is_array( $data ) )        {            $data = array( );        }        $items = array( );        if ( $type == self::DROPDOWN_TYPE_UNIT )        {            $items[] = array( "measureId" => 0, "measureValue" => "未分类" );            foreach ( $data as $key => $value )            {                $v['measureId'] = $value['id'];                $v['measureValue'] = $value['value'];                $items[] = $v;            }        }        else if ( $type == self::DROPDOWN_TYPE_SOURCE )        {            $items[] = array( "sourceId" => 0, "sourceValue" => "未分类" );            foreach ( $data as $key => $value )            {                $v['sourceId'] = $value['id'];                $v['sourceValue'] = $value['value'];                $items[] = $v;            }        }        else if ( $type == self::DROPDOWN_TYPE_WAY )        {            $items[] = array( "wayId" => 0, "wayValue" => "未分类" );            foreach ( $data as $key => $value )            {                $v['wayId'] = $value['id'];                $v['wayValue'] = $value['value'];                $items[] = $v;            }        }        else if ( $type == self::DROPDOWN_TYPE_PLACE )        {            $items[] = array( "storageId" => 0, "storageValue" => "未分类" );            foreach ( $data as $key => $value )            {                $v['storageId'] = $value['id'];                $v['storageValue'] = $value['value'];                $items[] = $v;            }        }        else if ( $type == self::DROPDOWN_TYPE_MANUFACTUER )        {            $items[] = array( "manufactuerId" => 0, "manufactuerValue" => "未分类" );            foreach ( $data as $key => $value )            {                $v['manufactuerId'] = $value['id'];                $v['manufactuerValue'] = $value['value'];                $items[] = $v;            }        }        else if ( $type == self::DROPDOWN_TYPE_SUPPLIER )        {            $items[] = array( "supplierId" => 0, "supplierValue" => "未分类" );            foreach ( $data as $key => $value )            {                $v['supplierId'] = $value['id'];                $v['supplierValue'] = $value['value'];                $items[] = $v;            }        }        else if ( $type == self::DROPDOWN_TYPE_RESIDUALS )        {            $items[] = array( "residualsId" => 0, "residualsValue" => "请选择" );            foreach ( $data as $key => $value )            {                $v['residualsId'] = $value['id'];                $v['residualsValue'] = $value['value'];                $items[] = $v;            }        }        ( );        $ds = new dataStore( );        $ds->data = $items;        echo $ds->makeJsonData( );        exit( );    }    private function _getCustomDrop( $key )    {        global $CNOA_DB;        $arr = explode( "_", $key );        $fieldid = substr( $arr['0'], 5 );        $list = $CNOA_DB->db_select( array( "id", "name" ), $this->table_select_item, "WHERE `fieldId` = ".$fieldid." AND `type`='2' AND `status`=1" );        if ( !is_array( $list ) )        {            $list = array( );        }        $items = array( );        foreach ( $list as $key => $value )        {            $v["field".$fieldid] = $value['id'];            $v["field".$fieldid."_name"] = $value['name'];            $items[] = $v;        }        ( );        $ds = new dataStore( );        $ds->data = $items;        echo $ds->makeJsonData( );        exit( );    }    private function _addassets( )    {        global $CNOA_DB;        $data['id'] = getpar( $_POST, "id" );        $data['way'] = getpar( $_POST, "wayId" );        $data['cnum'] = getpar( $_POST, "cnum" );        $data['cost'] = getpar( $_POST, "cost" );        $data['price'] = getpar( $_POST, "price" );        $data['remark'] = getpar( $_POST, "remark" );        $data['deptId'] = getpar( $_POST, "dept" );        $data['source'] = getpar( $_POST, "sourceId" );        $data['measure'] = getpar( $_POST, "measureId" );        $data['custody'] = getpar( $_POST, "custodyId" );        $data['storage'] = getpar( $_POST, "storageId" );        $data['supplier'] = getpar( $_POST, "supplierId" );        $data['typeName'] = getpar( $_POST, "sortid" );        $data['standard'] = getpar( $_POST, "standard" );        $data['assetsNum'] = getpar( $_POST, "assetsNum" );        $data['assetsName'] = getpar( $_POST, "assetsName" );        $data['manufactuer'] = getpar( $_POST, "manufactuerId" );        $data['useyear'] = getpar( $_POST, "useyear" );        $data['residuals'] = getpar( $_POST, "residualsId" );        $data['depreciationgold'] = getpar( $_POST, "depreciationgold" );        $data['purchase'] = strtotime( getpar( $_POST, "purchase" ) );        $data['recordDate'] = strtotime( getpar( $_POST, "recordDate" ) );        $temp = array( );        foreach ( $GLOBALS['_POST'] as $key => $value )        {            if ( substr( $key, 0, 5 ) == "field" )            {                $fieldid = substr( $key, 5 );                if ( is_numeric( $fieldid ) )                {                    $fieldtype = $CNOA_DB->db_getfield( "fieldtype", $this->table_custom, "WHERE `fieldid`=".$fieldid );                    $value = $this->formatCustomFieldData( $fieldtype, $value );                    $temp[$key] = $value;                }            }        }        $data = array_merge( $data, $temp );        if ( empty( $data['id'] ) )        {            if ( !empty( $data['cnum'] ) )            {                $row = $CNOA_DB->db_getone( array( "cnum" ), $this->table_manage, "WHERE `cnum`='".$data['cnum']."'" );                if ( !empty( $row ) )                {                    msg::callback( FALSE, lang( "existNotRepeat" ) );                }            }            if ( $data['recordDate'] < $data['purchase'] )            {                msg::callback( FALSE, lang( "buyTimeNotBigregTime" ) );            }            $data = $CNOA_DB->db_insert( $data, $this->table_manage );            app::loadapp( "main", "systemLogs" )->api_addLogs( "add", 6000, "", "资产管理" );            $numlist = $CNOA_DB->db_update( "nowNum=nowNum+1", $this->table_number, "WHERE `status` = 1" );            app::loadapp( "main", "systemLogs" )->api_addLogs( "update", 6003, "", "编号设置" );        }        else        {            if ( $data['recordDate'] < $data['purchase'] )            {                msg::callback( FALSE, lang( "buyTimeNotBigregTime" ) );            }            $getcount = $CNOA_DB->db_getcount( $this->table_secondment_list, "WHERE mid =".$data['id'] );            if ( $data['assetsNum'] < $getcount )            {                msg::callback( FALSE, "资产数量不能少于已借调出去的数量！" );            }            $data = $CNOA_DB->db_update( $data, $this->table_manage, "WHERE id=".$data['id'] );            app::loadapp( "main", "systemLogs" )->api_addLogs( "update", 6000, "", "资产管理" );        }    }    private function _getStatus( )    {        global $CNOA_DB;        $numlist = $CNOA_DB->db_getone( "*", $this->table_number );        if ( $numlist['status'] == 1 )        {            $numlist['nowNum'] = $numlist['nowNum'];            $nowleng = strlen( $numlist['nowNum'] );            $numleng = strlen( $numlist['num'] );            $num = substr( $numlist['num'], $nowleng, $numleng );            $shownum = $num.$numlist['nowNum'];            if ( $numlist['fuhao_check'] == 0 && $numlist['zimu_check'] == 0 )            {                $numlist['numShow'] = $shownum;            }            else if ( $numlist['fuhao_check'] == 0 )            {                $numlist['numShow'] = $numlist['zimu'].$shownum;            }            else if ( $numlist['zimu_check'] == 0 )            {                $numlist['numShow'] = $numlist['fuhao'].$shownum;            }            else            {                $numlist['numShow'] = $numlist['zimu'].$numlist['fuhao'].$shownum;            }            $data['cnum'] = $numlist['numShow'];            $data['status'] = 1;        }        else        {            $data['status'] = 0;        }        echo json_encode( $data );    }    private function _delassets( )    {        global $CNOA_DB;        $id = getpar( $_POST, "id" );        $getcount = $CNOA_DB->db_getcount( $this->table_secondment_list, "WHERE mid  IN (".$id.")" );        if ( $getcount )        {            msg::callback( FALSE, "请先删除已借调的资产!" );        }        if ( isinformat( $id ) )        {            $CNOA_DB->db_delete( $this->table_facility, "WHERE pid IN (".$id.")" );            $result = $CNOA_DB->db_delete( $this->table_manage, "WHERE id IN (".$id.")" );            if ( 0 < $result )            {                app::loadapp( "main", "systemLogs" )->api_addLogs( "del", 6000, "", "资产管理" );                msg::callback( TRUE, lang( "delSuccess" ) );            }        }        msg::callback( FALSE, lang( "delFail" ) );    }    private function _getAssetsField( $isReturn = FALSE )    {        global $CNOA_DB;        $data = array( );        $dblist = $CNOA_DB->db_select( "*", $this->table_custom_fix, "WHERE 1 ORDER BY `order` ASC, `fixid` ASC" );        if ( !is_array( $dblist ) )        {            $dblist = array( );        }        foreach ( $dblist as $v )        {            $field = array(                "fixid" => $v['fixid'],                "fieldtype" => $v['fieldtype'],                "xtype" => $this->getXtypeByFieldtype( $v['fieldtype'] ),                "field" => $v['displayfname'],                "fieldname" => empty( $v['alias'] ) ? $v['fixname'] : $v['alias'],                "add" => $v['add'],                "show" => $v['show'],                "must" => $v['must']            );            if ( in_array( $v['fieldtype'], array(                self::FIELD_TYPE_COMBO,                self::FIELD_TYPE_DEPT,                self::FIELD_TYPE_USER            ) ) )            {                $field['valueField'] = $v['valuefield'];                $field['displayField'] = $v['displayfield'];            }            $data[] = $field;        }        $dblist = $CNOA_DB->db_select( "*", $this->table_custom, "WHERE 1 ORDER BY `order` ASC, `fieldid` ASC" );        if ( !is_array( $dblist ) )        {            $dblist = array( );        }        foreach ( $dblist as $v )        {            $field = array(                "fixid" => $v['fieldid'],                "fieldtype" => $v['fieldtype'],                "xtype" => $this->getXtypeByFieldtype( $v['fieldtype'] ),                "field" => "field".$v['fieldid'],                "fieldname" => empty( $v['alias'] ) ? $v['fieldname'] : $v['alias'],                "add" => $v['add'],                "show" => $v['show'],                "must" => $v['must']            );            if ( in_array( $v['fieldtype'], array(                self::FIELD_TYPE_COMBO,                self::FIELD_TYPE_USER,                self::FIELD_TYPE_DEPT,                self::FIELD_TYPE_CHECKBOX            ) ) )            {                $field['field'] = "field".$v['fieldid']."_name";                $field['valueField'] = "field".$v['fieldid'];                $field['displayField'] = "field".$v['fieldid']."_name";            }            if ( $v['fieldtype'] == self::FIELD_TYPE_CHECKBOX )            {                $selectItems = $CNOA_DB->db_select( array( "id", "name" ), $this->table_select_item, "WHERE `fieldId`=".$v['fieldid']."  AND `type`=2 AND `status`=1" );                if ( !is_array( $selectItems ) )                {                    $selectItems = array( );                }                $field['columns'] = $selectItems;            }            $data[] = $field;        }        if ( $isReturn )        {            return $data;        }        echo json_encode( $data );    }    private function _getAssetsList( $id = "", $exportExcel = FALSE, $excelType = "" )    {        global $CNOA_DB;        if ( $excelType == "" )        {            $searchName = getpar( $_POST, "searchName", "" );            $searchSort = getpar( $_POST, "searchSort", "" );            $searchDept = getpar( $_POST, "searchDept", "" );            $items['way'] = getpar( $_POST, "wayId" );            $items['cnum'] = getpar( $_POST, "cnum" );            $items['cost'] = getpar( $_POST, "cost" );            $items['price'] = getpar( $_POST, "price" );            $items['remark'] = getpar( $_POST, "remark" );            $items['source'] = getpar( $_POST, "sourceId" );            $items['measure'] = getpar( $_POST, "measureId" );            $items['custody'] = getpar( $_POST, "custodyId" );            $items['storage'] = getpar( $_POST, "storageId" );            $items['supplier'] = getpar( $_POST, "supplierId" );            $items['typeName'] = getpar( $_POST, "sortid" );            $items['standard'] = getpar( $_POST, "standard" );            $items['assetsNum'] = getpar( $_POST, "assetsNum" );            $items['assetsName'] = getpar( $_POST, "assetsName" );            $items['manufactuer'] = getpar( $_POST, "manufactuerId" );            $items['useyear'] = getpar( $_POST, "useyear" );            $items['residuals'] = getpar( $_POST, "residualsId" );            $items['depreciationgold'] = getpar( $_POST, "depreciationgold" );            $purchase_start = strtotime( getpar( $_POST, "purchase_start" ) );            $purchase_end = strtotime( getpar( $_POST, "purchase_end" ) );            $recordDate_start = strtotime( getpar( $_POST, "recordDate_start" ) );            $recordDate_end = strtotime( getpar( $_POST, "recordDate_end" ) );            $temp = $tempTime = array( );            foreach ( $GLOBALS['_POST'] as $key => $value )            {                if ( empty( $value ) || !( substr( $key, 0, 5 ) == "field" ) )                {                    $fieldid = substr( $key, 5 );                    if ( is_numeric( $fieldid ) )                    {                        if ( is_array( $_POST[$key] ) )                        {                            foreach ( $GLOBALS['_POST'][$key] as $k => $v )                            {                                $temp[$key] .= $k.",";                            }                            $temp[$key] = substr( $temp[$key], 0, -1 );                        }                        else                        {                            $temp[$key] = $value;                        }                    }                    else                    {                        if ( substr( $key, -5 ) == "start" )                        {                            $tempTime[substr( $key, 0, -6 )]['start'] = strtotime( $value );                        }                        if ( substr( $key, -3 ) == "end" )                        {                            $tempTime[substr( $key, 0, -4 )]['end'] = strtotime( $value );                        }                    }                }            }            $advanceQuery = array_merge( $items, $temp );            $start = getpar( $_POST, "start", 0 );            $row = getpagesize( "assets_assets_management" );            $where = "WHERE 1";            if ( !empty( $searchName ) )            {                $where .= " AND `assetsName` LIKE '%".$searchName."%'";            }            if ( !empty( $searchSort ) )            {                $where .= " AND `typeName` = ".$searchSort;            }            if ( !empty( $searchDept ) )            {                $where .= " AND `deptId` = ".$searchDept;            }            if ( !empty( $id ) )            {                $where = "WHERE `id` = ".$id;            }            foreach ( $advanceQuery as $key => $value )            {                if ( !empty( $value ) )                {                    $where .= " AND `".$key."` LIKE '%{$value}%'";                }            }            if ( !empty( $purchase_start ) || !empty( $purchase_end ) )            {                $where .= " AND (`purchase` BETWEEN '".$purchase_start."' AND '{$purchase_end}')";            }            if ( !empty( $recordDate_start ) || !empty( $recordDate_end ) )            {                $where .= " AND (`recordDate` BETWEEN '".$recordDate_start."' AND '{$recordDate_end}')";            }            if ( !empty( $tempTime ) )            {                foreach ( $tempTime as $k => $v )                {                    $where .= " AND (`".$k."` BETWEEN '".$v['start']."' AND '".$v['end']."')";                }            }        }        else if ( $excelType == "ids" )        {            $where = " WHERE `id` IN (".$id.") ";        }        else if ( $excelType == "deptId" )        {            $where = " WHERE `deptId` IN (".$id.") ";        }        $result = $CNOA_DB->db_select( "*", $this->table_manage, $where.( " ORDER BY `id` DESC LIMIT ".$start.",{$row}" ) );        if ( $exportExcel )        {            $result = $CNOA_DB->db_select( "*", $this->table_manage, $where." ORDER BY `id` DESC " );        }        if ( !is_array( $result ) )        {            $result = array( );        }        $data = array( );        foreach ( $result as $value )        {            $value['sortid'] = $value['typeName'];            $value['typeName'] = !empty( $value['typeName'] ) ? $this->getSortName( $value['typeName'] ) : "";            $value['purchase'] = !empty( $value['purchase'] ) ? date( "Y-m-d", $value['purchase'] ) : "";            $value['recordDate'] = !empty( $value['recordDate'] ) ? date( "Y-m-d", $value['recordDate'] ) : "";            $value['custodyId'] = $value['custody'];            $value['custody'] = !empty( $value['custody'] ) ? $this->__takeUserName( $value['custody'] ) : "";            $value['sourceId'] = $value['source'];            $value['source'] = !empty( $value['source'] ) ? $this->getDropValue( $value['source'] ) : "";            $value['measureId'] = $value['measure'];            $value['measure'] = !empty( $value['measure'] ) ? $this->getDropValue( $value['measure'] ) : "";            $value['storageId'] = $value['storage'];            $value['storage'] = !empty( $value['storage'] ) ? $this->getDropValue( $value['storage'] ) : "";            $value['wayId'] = $value['way'];            $value['way'] = !empty( $value['way'] ) ? $this->getDropValue( $value['way'] ) : "";            $value['supplierId'] = $value['supplier'];            $value['supplier'] = !empty( $value['supplier'] ) ? $this->getDropValue( $value['supplier'] ) : "";            $value['manufactuerId'] = $value['manufactuer'];            $value['manufactuer'] = !empty( $value['manufactuer'] ) ? $this->getDropValue( $value['manufactuer'] ) : "";            $value['standardId'] = $value['standard'];            $value['residualsId'] = $value['residuals'];            $value['residuals'] = !empty( $value['residuals'] ) ? $this->getDropValue( $value['residuals'] ) : "";            $value['dept'] = $value['deptId'];            $value['deptId'] = !empty( $value['deptId'] ) ? app::loadapp( "main", "struct" )->api_getNameById( $value['deptId'] ) : "";            foreach ( $value as $k => $v )            {                if ( substr( $k, 0, 5 ) == "field" )                {                    $fieldid = substr( $k, 5 );                    $fieldtype = $CNOA_DB->db_getfield( "fieldtype", $this->table_custom, "WHERE `fieldid`=".$fieldid );                    if ( empty( $fieldtype ) || empty( $v ) )                    {                        switch ( $fieldtype )                        {                        case self::FIELD_TYPE_DATA :                            $value[$k] = date( "Y-m-d", $v );                            continue;                        case self::FIELD_TYPE_CHECKBOX :                            $v = explode( ",", $v );                            $temp = array( );                            foreach ( $v as $vv )                            {                                $name = $CNOA_DB->db_getfield( "name", $this->table_select_item, "WHERE `id`=".$vv." AND `type`=2 AND `status`=1" );                                if ( $name )                                {                                    $temp[] = $name;                                    $value[$k.( "[".$vv."]" )] = TRUE;                                }                            }                            $value[$k."_name"] = implode( ",", $temp );                            continue;                        case self::FIELD_TYPE_COMBO :                            $value[$k."_name"] = $CNOA_DB->db_getfield( "name", $this->table_select_item, "WHERE `id`=".$v."  AND `type`=2 AND `status`=1" );                            continue;                        case self::FIELD_TYPE_USER :                            $value[$k."_name"] = $this->__takeUserName( $v );                            continue;                        case self::FIELD_TYPE_DEPT :                            $value[$k."_name"] = app::loadapp( "main", "struct" )->api_getNameById( $v );                            continue;                        }                        $value[$k] = $v;                    }                }            }            $data[] = $value;        }        if ( !empty( $id ) && $exportExcel )        {            return $data;        }        ( );        $dataStore = new dataStore( );        $dataStore->data = $data;        $dataStore->total = $CNOA_DB->db_getcount( $this->table_manage, $where );        echo $dataStore->makeJsonData( );        exit( );    }    private function _getSortList( )    {        global $CNOA_DB;        $list = $CNOA_DB->db_select( array( "id", "name", "fid", "about" ), $this->table_sort );        if ( !is_array( $list ) )        {            $list = array( );        }        $type = getpar( $_GET, "type" );        $data = $temp = array( );        if ( $type == "tree" )        {            foreach ( $list as $key => $value )            {                $temp['id'] = $value['id'];                $temp['text'] = $value['name'];                $temp['fid'] = $value['fid'];                $temp['about'] = $value['about'];                $temp['leaf'] = 1;                $temp['iconCls'] = $v['id'] == 1 ? "icon-tree-root-cnoa" : "icon-style-page-key";                $data[$value['id']] = $temp;            }            $dblist = $this->getTree( $data );            $dblist = $this->_makeArray( $dblist );            echo json_encode( $dblist );        }        else if ( $type == "combo" )        {            foreach ( $list as $key => $value )            {                $temp['id'] = $value['id'];                $temp['text'] = $value['name'];                $temp['fid'] = $value['fid'];                $temp['about'] = $value['about'];                $temp['leaf'] = 1;                $temp['checked'] = FALSE;                $temp['iconCls'] = $v['id'] == 1 ? "icon-tree-root-cnoa" : "icon-style-page-key";                $data[$value['id']] = $temp;            }            $dblist = $this->getTree( $data );            $dblist = $this->_makeArray( $dblist );            echo json_encode( $dblist );        }    }    private function getTree( $items )    {        foreach ( $items as $k => $item )        {            $items[$item['fid']]['children'][] =& $items[$item['id']];        }        if ( isset( $items[0]['children'] ) )        {            return $items[0]['children'];        }        return array( );    }    private function _makeArray( $arr )    {        foreach ( $arr as $k => $v )        {            if ( is_array( $arr[$k]['children'] ) )            {                $arr[$k]['leaf'] = FALSE;                $this->_makeArray( $arr[$k]['children'] );            }        }        return $arr;    }    private function _viewassets( )    {        global $CNOA_DB;        $id = getpar( $_GET, "id" );        $tempData = $this->_getAssetsList( $id );        $result = $this->_getAssetsField( TRUE );        $list = $CNOA_DB->db_select( array( "value" ), $this->table_photos, "WHERE `manageid`=".$id );        if ( !is_array( $list ) )        {            $list = array( );        }        $plist = array( );        foreach ( $list as $key => $value )        {            $plist[] = $GLOBALS['CNOA_BASE_URL_FILE']."/common/assets/".$value['value'];        }        $field = $content = array( );        foreach ( $result as $key => $value )        {            $field[$value['field']] = $value['fieldname'];        }        foreach ( $tempData as $value )        {            $content = $value;        }        $len = count( $content );        include( CNOA_PATH."/app/assets/tpl/default/assets/assetMgr.tpl.htm" );    }    private function _getPhotoList( )    {        global $CNOA_DB;        $manageid = getpar( $_GET, "id", "" );        if ( empty( $manageid ) )        {            return FALSE;        }        $list = $CNOA_DB->db_select( "*", $this->table_photos, "WHERE `manageid`=".$manageid );        if ( !is_array( $list ) )        {            $list = array( );        }        $data = array( );        foreach ( $list as $key => $value )        {            $temp = array( );            $temp['id'] = $value['id'];            $temp['fileTime'] = date( "Y-m-d H:i:s", $value['fileTime'] );            $temp['value'] = $value['value'];            $temp['uname'] = $this->__takeUserName( $value['userid'] );            $data[] = $temp;        }        ( );        $ds = new dataStore( );        $ds->data = $data;        echo $ds->makeJsonData( );        exit( );    }    private function _upPhoto( )    {        global $CNOA_DB;        global $CNOA_SESSION;        $manageid = getpar( $_POST, "id", "" );        $uid = $CNOA_SESSION->get( "UID" );        if ( empty( $manageid ) )        {            return FALSE;        }        set_time_limit( 0 );        $img_ext = strtolower( strrchr( $_FILES['photo']['name'], "." ) );        $img_name = $GLOBALS['CNOA_TIMESTAMP']."_".md5( $GLOBALS['CNOA_TIMESTAMP'] ).$img_ext;        $img_dst = CNOA_PATH_FILE."/common/assets/".$img_name;        $img_url = $GLOBALS['CNOA_BASE_URL_FILE']."/common/assets/".$img_name;        $extArray = array( ".jpg", ".gif", ".png" );        if ( !in_array( $img_ext, $extArray ) )        {            msg::callback( FALSE, "只能上传jpg、png、gif格式" );        }        if ( cnoa_move_uploaded_file( $_FILES['photo']['tmp_name'], $img_dst."_tmp" ) )        {            ( );            $picture = new picture( );            $picture->setSrcImg( $img_dst."_tmp" );            $picture->setDstImg( $img_dst );            $picture->createImg( 800, 600 );            @unlink( $img_dst."_tmp" );            $data['manageid'] = $manageid;            $data['userid'] = $uid;            $data['value'] = $img_name;            $data['fileTime'] = $GLOBALS['CNOA_TIMESTAMP'];            $insert = $CNOA_DB->db_insert( $data, $this->table_photos );            app::loadapp( "main", "systemLogs" )->api_addLogs( "update", 11, "资产图片" );            msg::callback( TRUE, $img_url );            exit( );        }        msg::callback( FALSE, lang( "uploadFail" ) );        exit( );    }    private function _getOnePhoto( )    {        global $CNOA_DB;        $id = getpar( $_POST, "id" );        if ( empty( $id ) )        {            return FALSE;        }        $img_name = $CNOA_DB->db_getfield( "value", $this->table_photos, "WHERE `id`=".$id );        $img_url = $GLOBALS['CNOA_BASE_URL_FILE']."/common/assets/".$img_name;        msg::callback( TRUE, $img_url );        exit( );    }    private function _delPhoto( )    {        global $CNOA_DB;        $ids = getpar( $_POST, "ids" );        if ( empty( $ids ) )        {            msg::callback( FALSE, lang( "delFail" ) );        }        if ( isinformat( $ids ) )        {            $list = $CNOA_DB->db_select( array( "value" ), $this->table_photos, "WHERE `id` IN (".$ids.")" );            $CNOA_DB->db_delete( $this->table_photos, "WHERE `id` IN (".$ids.")" );            if ( !is_array( $list ) )            {                $list = array( );            }            foreach ( $list as $v )            {                $img_name = $v['value'];                if ( !empty( $img_name ) )                {                    $img_dst = CNOA_PATH_FILE."/common/assets/".$img_name;                    @unlink( $img_dst );                }            }            app::loadapp( "main", "systemLogs" )->api_addLogs( "del", 6000, "", "资产图片" );            msg::callback( TRUE, lang( "delSuccess" ) );        }        else        {            msg::callback( FALSE, lang( "delFail" ) );        }    }    private function _exportExcel( )    {        global $CNOA_SESSION;        global $CNOA_DB;        $step = getpar( $_POST, "step", getpar( $_GET, "step", 0 ) );        if ( $step == 1 )        {            $ids = getpar( $_POST, "ids", "" );            $deptID = getpar( $_POST, "deptID", "" );            $info = array( );            if ( $ids && $deptID )            {                msg::callback( FALSE, "导出部分数据请不要选择所在部门" );            }            else if ( empty( $ids ) && !empty( $deptID ) )            {                $info[0] = $this->_getAssetsList( $deptID, TRUE, "deptId" );            }            else if ( !empty( $ids ) || empty( $deptID ) )            {                $info[0] = $this->_getAssetsList( $ids, TRUE, "ids" );            }            $fileName = "CNOA.HR-".date( "Ymd", $GLOBALS['CNOA_TIMESTAMP'] )."-".string::rands( 10, 2 ).".xlsx";            $assetsAssetsmanagement = include( CNOA_PATH."/resources/export/assets_assetsAssetsmanagement.php" );            $result = $CNOA_DB->db_select( array( "fieldid", "fieldname", "fieldtype" ), $this->table_custom, "WHERE `show` = 1 " );            foreach ( $result as $v )            {                if ( 5 < $v['fieldtype'] )                {                    $field = "field".$v[fieldid]."_name";                }                else                {                    $field = "field".$v[fieldid];                }                $assetsAssetsmanagement[0][$field]['type'] = "s";                $assetsAssetsmanagement[0][$field]['name'] = $v['fieldname'];            }            ( );            $excel = new exportExcel( );            $info = $excel->formatExcelDate( $assetsAssetsmanagement, $info );            $sheetName = array( "资产信息" );            $excel->init( $info, $sheetName );            $excel->save( CNOA_PATH_FILE."/common/temp/".$fileName, "excel2007" );            msg::callback( TRUE, $fileName );        }        else        {            $fileName = getpar( $_GET, "file", "" );            $file = CNOA_PATH_FILE."/common/temp/".$fileName;            if ( !file_exists( $file ) )            {                echo "文件不存在!";                exit( );            }            if ( $CNOA_DB )            {                $CNOA_DB->close( );            }            @ini_set( "zlib.output_compression", "Off" );            header( "Content-Type: application/octet-stream" );            header( "Content-Disposition: attachment;filename=".cn_urlencode( "资产信息.xlsx" ) );            header( "Content-Length: ".filesize( $file ) );            ob_clean( );            flush( );            readfile( $file );            @unlink( $file );        }        exit( );    }    private function _getfacilitylist( )    {        global $CNOA_DB;        $faid = getpar( $_GET, "id", "" );        $start = getpar( $_POST, "start", 0 );        $row = 15;        $result = $CNOA_DB->db_select( "*", $this->table_facility, "WHERE pid=".$faid." ORDER BY `faid` DESC LIMIT {$start},{$row}" );        if ( !is_array( $result ) )        {            $result = array( );        }        $data = array( );        foreach ( $result as $key => $value )        {            $value['faid'] = $value['faid'];            $value['pid'] = $value['pid'];            $value['supplier'] = $value['supplier'];            $value['supplier'] = !empty( $value['supplier'] ) ? $this->getDropValue( $value['supplier'] ) : "";            $value['facilitynum'] = $value['facilitynum'];            $value['measure'] = $value['measure'];            $value['measure'] = !empty( $value['measure'] ) ? $this->getDropValue( $value['measure'] ) : "";            $value['facilityname'] = $value['facilityname'];            $value['regtime'] = date( "Y-m-d", $value['regtime'] );            $value['remark'] = $value['remark'];            $data[] = $value;        }        ( );        $ds = new dataStore( );        $ds->total = $CNOA_DB->db_getcount( $this->table_facility, "WHERE pid=".$faid );        $ds->data = $data;        echo $ds->makeJsonData( );        exit( );    }    private function _addfacility( )    {        global $CNOA_DB;        $data = array( );        $data['faid'] = getpar( $_POST, "faid" );        $data['pid'] = getpar( $_POST, "pid", "" );        $data['supplier'] = getpar( $_POST, "supplier" );        $data['facilitynum'] = getpar( $_POST, "facilitynum" );        $data['measure'] = getpar( $_POST, "measure" );        $data['facilityname'] = getpar( $_POST, "facilityname" );        $data['regtime'] = strtotime( getpar( $_POST, "regtime" ) );        $data['remark'] = getpar( $_POST, "remark" );        if ( empty( $data['faid'] ) )        {            $getOne = $CNOA_DB->db_getcount( $this->table_facility, "WHERE `facilitynum` = '".$data['facilitynum']."'" );            if ( $getOne )            {                msg::callback( FALSE, "该编号已存在！" );            }            $result = $CNOA_DB->db_insert( $data, $this->table_facility );            msg::callback( TRUE, lang( "successopt" ) );        }        else        {            $result = $CNOA_DB->db_update( $data, $this->table_facility, "WHERE faid=".$data['faid'] );        }    }    private function _editfacility( )    {        global $CNOA_DB;        $data['faid'] = getpar( $_POST, "faid" );        $data = $CNOA_DB->db_getone( "*", $this->table_facility, "WHERE faid=".$data['faid'] );        $data['regtime'] = date( "Y-m-d", $data['regtime'] );        $data['supplier'] = !empty( $data['supplier'] ) ? $data['supplier'] : "";        $data['measure'] = !empty( $data['measure'] ) ? $data['measure'] : "";        $data['facilityname'] = !empty( $data['facilityname'] ) ? $data['facilityname'] : "";        $data['remark'] = !empty( $data['remark'] ) ? $data['remark'] : "";        ( );        $ds = new dataStore( );        $ds->data = $data;        echo $ds->makeJsonData( );    }    private function _delfacility( )    {        global $CNOA_DB;        $ids = getpar( $_POST, "ids" );        if ( isinformat( $ids ) && $CNOA_DB->db_delete( $this->table_facility, "WHERE `faid` IN (".$ids.")" ) )        {            msg::callback( TRUE, lang( "delSuccess" ) );        }        msg::callback( FALSE, lang( "delFail" ) );    }    private function _comboStore( )    {        global $CNOA_DB;        $key = getpar( $_GET, "type", "" );        $dropType = $this->getDropType( $key );        $this->_comboDrop( $dropType );    }    private function _comboDrop( $type )    {        global $CNOA_DB;        $data = $CNOA_DB->db_select( array( "id", "value" ), $this->table_dropdown, "where `type`='".$type."'" );        if ( !is_array( $data ) )        {            $data = array( );        }        ( );        $ds = new dataStore( );        $ds->data = $data;        echo $ds->makeJsonData( );        exit( );    }    private function _import_assets_insert( )    {        global $CNOA_DB;        global $CNOA_SESSION;        global $CNOA_CONTROLLER;        $list = $CNOA_DB->db_select( array( "cnum" ), $this->table_manage );        if ( !is_array( $list ) )        {            $list = array( );        }        $old_truename = array( );        foreach ( $list as $value )        {            foreach ( $value as $v )            {                if ( $v )                {                    $old_cnum[] = $v;                }            }        }        $uid = $CNOA_SESSION->get( "UID" );        $select = getpar( $_POST, "select", array( ) );        $colum = getpar( $_POST, "colum", array( ) );        $ck = getpar( $_POST, "ck", array( ) );        $repeats = "";        $fields_name = $CNOA_DB->db_getFieldsName( $this->table_manage );        $deptDb = $CNOA_DB->db_select( array( "id", "name" ), "main_struct" );        $deptNames = array( );        foreach ( $deptDb as $v )        {            $deptNames[$v['id']] = $v['name'];        }        $personDb = $CNOA_DB->db_select( array( "uid", "truename" ), "main_user" );        $personNames = array( );        foreach ( $personDb as $v )        {            $personNames[$v['uid']] = $v['truename'];        }        $typeDb = $CNOA_DB->db_select( array( "id", "name" ), $this->table_sort );        $typeName = array( );        foreach ( $typeDb as $v )        {            $typeName[$v['id']] = $v['name'];        }        $dropdown = $CNOA_DB->db_select( array( "id", "value", "type" ), $this->table_dropdown );        if ( is_array( $dropdown ) )        {            foreach ( $dropdown as $item )            {                switch ( $item['type'] )                {                case self::DROPDOWN_TYPE_UNIT :                    $measure[$item['id']] = $item['value'];                    break;                case self::DROPDOWN_TYPE_SOURCE :                    $source[$item['id']] = $item['value'];                    break;                case self::DROPDOWN_TYPE_WAY :                    $way[$item['id']] = $item['value'];                    break;                case self::DROPDOWN_TYPE_PLACE :                    $storage[$item['id']] = $item['value'];                    break;                case self::DROPDOWN_TYPE_MANUFACTUER :                    $manufactuer[$item['id']] = $item['value'];                    break;                case self::DROPDOWN_TYPE_SUPPLIER :                    $supplier[$item['id']] = $item['value'];                    break;                case self::DROPDOWN_TYPE_RESIDUALS :                    $residuals[$item['id']] = $item['value'];                }            }        }        $style = array(            "measure" => $measure,            "source" => $source,            "way" => $way,            "storage" => $storage,            "manufactuer" => $manufactuer,            "supplier" => $supplier,            "residuals" => $residuals,            "typeName" => $typeName,            "custody" => $personNames,            "deptId" => $deptNames        );        $fields = $values = array( );        $data = importExcel::getimportdata( $style );        $fields = array_keys( current( &$data ) );        $exData = $tempName = array( );        $totalNum = count( $data );        foreach ( $data as $key => $row )        {            if ( $row['cnum'] )            {                $attNum = $CNOA_DB->db_getcount( $this->table_manage, "WHERE `cnum` = '".$row['cnum']."'" );                if ( 1 < $attNum )                {                    unset( $data[$key] );                }                else                {                    $tempName[] = $row['cnum'];                    $row['purchase'] = strtotime( $row['purchase'] );                    $row['recordDate'] = strtotime( $row['recordDate'] );                    $value = array( );                    foreach ( $row as $k => $v )                    {                        if ( ereg( "field", $k ) )                        {                            $customId = str_replace( "field", "", $k );                            if ( is_numeric( $customId ) )                            {                                $type = $CNOA_DB->db_getfield( "fieldtype", $this->table_custom, "WHERE `fieldid`=".$customId );                                if ( !empty( $v ) )                                {                                    $row[$k] = $this->formatCustomFieldData2( $type, $v, $customId );                                }                            }                        }                    }                    foreach ( $fields as $field )                    {                        $value[] = $row[$field];                    }                    if ( in_array( $row['cnum'], $old_cnum ) )                    {                        $updateSet = array( );                        foreach ( $fields as $field )                        {                            $updateSet[] = "`".$field."`='{$row[$field]}'";                        }                        $upValues[] = "UPDATE ".tname( $this->table_manage )." SET ".implode( ",", $updateSet ).( " WHERE `cnum` = '".$row['cnum']."'" );                    }                    else                    {                        $values[] = "('".implode( "','", $value )."')";                    }                }            }        }        $fields = "(`".implode( "`,`", $fields )."`)";        $newNum = count( $values );        $upNum = count( $upValues );        $failedNum = $totalNum - $newNum - $upNum;        $values = array_chunk( $values, 200 );        foreach ( $values as $v )        {            $values2 = implode( ",", $v );            $sql = "INSERT INTO ".tname( $this->table_manage ).( " ".$fields." VALUES " ).$values2;            $CNOA_DB->query( $sql );        }        if ( isset( $upValues ) )        {            $hostInfo = explode( ":", CNOA_DB_HOST );            $host = $hostInfo[0];            $port = isset( $hostInfo[1] ) ? $hostInfo[1] : "3306";            ( $host, CNOA_DB_USER, CNOA_DB_PWD, CNOA_DB_NAME, $port );            $mysqli = new mysqli( );            $mysqli->query( "SET NAMES utf8;" );            if ( mysqli_connect_errno( ) )            {                printf( "Connect failed: %s\n", mysqli_connect_error( ) );                exit( );            }            $upValues = array_chunk( $upValues, 200 );            foreach ( $upValues as $v )            {                $sql = implode( ";", $v ).";";                $mysqli->multi_query( $sql );            }            unset( $upValues );        }        unset( $values );        $callBack = array( );        $callBack['success'] = TRUE;        $callBack['msg'] = "新导入:".$newNum." 更新:".$upNum." 失败:".$failedNum."<br><span style=\"color: red;\">注:</span>没有资产编号的无法导入";        $callBack['callback'] = "parent.CNOA_assets_assets_assetsmanagement.grid.store.reload();";        echo json_encode( $callBack );        exit( );    }}?>