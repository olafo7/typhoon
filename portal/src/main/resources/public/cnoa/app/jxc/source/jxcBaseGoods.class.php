<?php//decode by qq2859470class jxcBaseGoods extends jxcBase{    protected $modelId = 1;    public function run( )    {        $task = getpar( $_GET, "task", "" );        switch ( $task )        {        case "loadPage" :            $this->_loadPage( );            exit( );        case "getGoodsSorts" :            $this->_getGoodsSorts( );            exit( );        case "editGoodsSorts" :            $this->_editGoodsSorts( );            exit( );        case "delGoodsSorts" :            $this->_delGoodsSorts( );            exit( );        case "getGoodsCustomField" :            $this->getCustomField( );            exit( );        case "getGoodsList" :            $this->_getGoodsList( );            exit( );        case "editGoods" :            $this->_editGoods( );            exit( );        case "delGoods" :            $this->_delGoods( );            exit( );        case "getComboStore" :            $this->_getComboStore( );            exit( );        case "import_goods" :            $step = getpar( $_GET, "step", "" );            if ( $step == "insert" )            {                $this->_import_goods_insert( );                exit( );            }            if ( $step == "upload" )            {                new importExcel( );                ( $step );                exit( );            }            global $CNOA_DB;            $file = CNOA_PATH."/resources/import/map/maptable_goods.php";            if ( file_exists( $file ) )            {                $options = include( $file );            }            $result = $CNOA_DB->db_select( array( "fieldid", "fieldname" ), $this->table_custom_field, "WHERE `mid`=1" );            if ( !is_array( $result ) )            {                $result = array( );            }            foreach ( $result as $key => $value )            {                $options["field".$value['fieldid']] = $value['fieldname'];            }            new importExcel( );            ( $step, "", $options );            exit( );        case "exportExcel" :            $this->_exportExcel( );        }        exit( );    }    private function _loadPage( )    {        global $CNOA_CONTROLLER;        $tplPath = $CNOA_CONTROLLER->appPath."/tpl/default/base/goods.htm";        $CNOA_CONTROLLER->loadExtraTpl( $tplPath );    }    private function _getGoodsSorts( )    {        global $CNOA_DB;        $sorts = $this->api_getsorts( );        ( );        $dataStore = new dataStore( );        $dataStore->total = $CNOA_DB->db_getcount( $this->table_sort );        $dataStore->data = $sorts;        echo $dataStore->makeJsonData( );    }    private function _editGoodsSorts( )    {        global $CNOA_DB;        $id = getpar( $_POST, "id", 0 );        $name = getpar( $_POST, "name", "" );        $order = getpar( $_POST, "order", 0 );        if ( empty( $name ) )        {            msg::callback( FALSE, lang( "flNameNotEmpty" ) );        }        $data['name'] = $name;        $data['order'] = $order;        $response = "";        if ( empty( $id ) )        {            $result = $CNOA_DB->db_insert( $data, $this->table_sort );            if ( $result )            {                $response = lang( "successopt" );            }            else            {                $response = lang( "optFail" );            }        }        else        {            $result = $CNOA_DB->db_update( $data, $this->table_sort, "WHERE `id`=".$id );            if ( $result )            {                $response = lang( "editSuccess" );            }            else            {                $response = lang( "editFail" );            }        }        msg::callback( TRUE, $response );    }    private function _delGoodsSorts( )    {        global $CNOA_DB;        $id = getpar( $_POST, "id", 0 );        if ( empty( $id ) )        {            msg::callback( FALSE, lang( "delFail" ) );        }        $result = $CNOA_DB->db_delete( $this->table_sort, "WHERE `id`=".$id );        msg::callback( TRUE, $result ? lang( "delSuccess" ) : lang( "delFail" ) );    }    private function _getGoodsList( $return = FALSE )    {        global $CNOA_DB;        $data = $this->api_getGoodsList( 0, TRUE );        $quantity = app::loadapp( "jxc", "stock" )->api_getGoodsQuantity( );        if ( !is_array( $data ) )        {            $data = array( );        }        foreach ( $data['data'] as $key => $value )        {            $data['data'][$key]['stock'] = $quantity[$value['id']] ? $quantity[$value['id']] : 0;        }        if ( $return )        {            return $data['data'];        }        ( );        $ds = new dataStore( );        $ds->data = $data['data'];        $ds->total = $data['total'];        echo $ds->makeJsonData( );    }    private function _editGoods( )    {        global $CNOA_DB;        $goodsname = getpar( $_POST, "goodsname" );        if ( empty( $goodsname ) )        {            msg::callback( FALSE, lang( "proNameNotEmpty" ) );        }        $sid = intval( getpar( $_POST, "sid" ) );        if ( empty( $sid ) )        {            msg::callback( FALSE, lang( "goodsNotEmpty" ) );        }        $manager = getpar( $_POST, "manager" );        if ( empty( $manager ) )        {            msg::callback( FALSE, lang( "headNotEmpty" ) );        }        $unit = getpar( $_POST, "unit" );        if ( empty( $unit ) )        {            msg::callback( FALSE, lang( "unitNotEmpty" ) );        }        $standard = getpar( $_POST, "standard" );        if ( empty( $standard ) )        {            msg::callback( FALSE, lang( "ggNotEmpty" ) );        }        $price = getpar( $_POST, "price", 0 );        $id = intval( getpar( $_POST, "id" ) );        $goodsCode = getpar( $_POST, "goodsCode" );        if ( !empty( $goodsCode ) )        {            if ( empty( $id ) )            {                $count = $CNOA_DB->db_getcount( $this->table_goods, "WHERE `goodsCode`='".$goodsCode."'" );                if ( 0 < $count )                {                    msg::callback( FALSE, lang( "goodsCodeExist" ) );                }            }            else            {                $oldCode = $CNOA_DB->db_getfield( "goodsCode", $this->table_goods, "WHERE `id`=".$id );                $count = $CNOA_DB->db_getcount( $this->table_goods, "WHERE `goodsCode`='".$goodsCode."'" );                if ( 0 < $count && $oldCode != $goodsCode )                {                    msg::callback( FALSE, lang( "goodsCodeExist" ) );                }            }        }        $data['goodsname'] = $goodsname;        $data['sid'] = $sid;        $data['manager'] = $manager;        $data['unit'] = $unit;        $data['standard'] = $standard;        $data['price'] = floatval( $price );        $data['goodsCode'] = $goodsCode;        ( self::CUSTOM_FIELD_CODE );        $cf = new customField( );        $fieldNames = $cf->getAllCustomFieldsByMid( $this->modelId );        foreach ( $GLOBALS['_POST'] as $k => $v )        {            if ( array_key_exists( $k, $fieldNames ) )            {                $data[$k] = getpar( $_POST, $k, "" );                $data[$k] = $cf->formatCustomFieldData( $fieldNames[$k]['fieldtype'], $data[$k] );            }        }        if ( empty( $id ) )        {            $CNOA_DB->db_insert( $data, $this->table_goods );            msg::callback( TRUE, lang( "successopt" ) );        }        else        {            $CNOA_DB->db_update( $data, $this->table_goods, "WHERE `id`=".$id );            msg::callback( TRUE, lang( "editSuccess" ) );        }    }    private function _delGoods( )    {        global $CNOA_DB;        $ids = getpar( $_POST, "ids", 0 );        if ( !empty( $ids ) )        {            $CNOA_DB->db_delete( $this->table_goods, "WHERE `id` IN (".$ids.")" );        }        msg::callback( TRUE, lang( "delSuccess" ) );    }    private function _import_goods_insert( )    {        global $CNOA_DB;        global $CNOA_SESSION;        global $CNOA_CONTROLLER;        $list = $CNOA_DB->db_select( array( "goodsCode" ), $this->table_goods );        if ( !is_array( $list ) )        {            $list = array( );        }        $old_goodsCodes = array( );        foreach ( $list as $value )        {            foreach ( $value as $v )            {                if ( $v )                {                    $old_goodsCodes[] = $v;                }            }        }        $managerDb = $CNOA_DB->db_select( array( "uid", "truename" ), "main_user" );        $managerNames = array( );        foreach ( $managerDb as $key => $value )        {            $managerNames[$value['uid']] = $value['truename'];        }        $goodsDb = $CNOA_DB->db_select( array( "id", "name" ), "jxc_sort" );        $goodsNames = array( );        foreach ( $goodsDb as $key => $value )        {            $goodsNames[$value['id']] = $value['name'];        }        $style = array(            "manager" => $managerNames,            "sid" => $goodsNames        );        $fields = $values = array( );        $data = importExcel::getimportdata( $style );        $fields = array_keys( current( &$data ) );        $tempGoodsCode = array( );        $totalNum = count( $data );        foreach ( $data as $key => $row )        {            if ( !$row['goodsname'] && $row['goodsCode'] && in_array( $row['goodsCode'], $tempGoodsCode ) )            {                if ( $row['goodsCode'] )                {                    $tempGoodsCode[] = $row['goodsCode'];                }                $value = array( );                foreach ( $row as $k => $v )                {                    if ( ereg( "field", $k ) )                    {                        $customId = str_replace( "field", "", $k );                        if ( is_numeric( $customId ) )                        {                            $type = $CNOA_DB->db_getfield( "fieldtype", $this->table_custom_field, "WHERE `fieldId`=".$customId );                            if ( !empty( $v ) )                            {                                $row[$k] = $this->formatCustomFieldData2( $type, $v, $customId );                            }                        }                    }                }                foreach ( $fields as $field )                {                    $value[] = $row[$field];                }                if ( in_array( $row['goodsCode'], $old_goodsCodes ) )                {                    $updateSet = array( );                    foreach ( $fields as $field )                    {                        $updateSet[] = "`".$field."`='{$row[$field]}'";                    }                    $upValues[] = "UPDATE ".tname( $this->table_goods )." SET ".implode( ",", $updateSet ).( " WHERE `goodsCode` = '".$row['goodsCode']."'" );                }                else                {                    $values[] = "('".implode( "','", $value )."')";                }            }        }        $fields = "(`".implode( "`,`", $fields )."`)";        $newNum = count( $values );        $upNum = count( $upValues );        $failedNum = $totalNum - $newNum - $upNum;        $values = array_chunk( $values, 200 );        foreach ( $values as $v )        {            $values2 = implode( ",", $v );            $sql = "INSERT INTO ".tname( $this->table_goods ).( " ".$fields." VALUES " ).$values2;            $CNOA_DB->query( $sql );        }        if ( isset( $upValues ) )        {            $hostInfo = explode( ":", CNOA_DB_HOST );            $host = $hostInfo[0];            $port = isset( $hostInfo[1] ) ? $hostInfo[1] : "3306";            ( $host, CNOA_DB_USER, CNOA_DB_PWD, CNOA_DB_NAME, $port );            $mysqli = new mysqli( );            $mysqli->query( "SET NAMES utf8;" );            if ( mysqli_connect_errno( ) )            {                printf( "Connect failed: %s\n", mysqli_connect_error( ) );                exit( );            }            $upValues = array_chunk( $upValues, 200 );            foreach ( $upValues as $v )            {                $sql = implode( ";", $v ).";";                $mysqli->multi_query( $sql );            }            unset( $upValues );        }        unset( $values );        $callBack = array( );        $callBack['success'] = TRUE;        $callBack['msg'] = "新导入:".$newNum." 更新:".$upNum." 失败:".$failedNum."<br><span style=\"color: red;\">注:</span>没有填写货品名称的无法导入";        $callBack['callback'] = "parent.CNOA_jxc_base_goods.goodsGridPanel.store.reload();";        echo json_encode( $callBack );        exit( );    }    private function _exportExcel( )    {        global $CNOA_SESSION;        global $CNOA_DB;        $step = getpar( $_POST, "step", getpar( $_GET, "step", 0 ) );        if ( $step == 1 )        {            $info = array( );            $fileName = "CNOA.HR-".date( "Ymd", $GLOBALS['CNOA_TIMESTAMP'] )."-".string::rands( 10, 2 ).".xlsx";            $info[0] = $this->_getGoodsList( TRUE );            $jxcInfo = include( CNOA_PATH."/resources/export/jxc_goodsInfo.php" );            $result = $CNOA_DB->db_select( array( "fieldId", "fieldname", "fieldtype" ), $this->table_custom_field, "WHERE `show` = 1 AND `mid`=1 " );            foreach ( $result as $v )            {                if ( 5 < $v['fieldtype'] )                {                    $field = "field".$v[fieldId]."_name";                }                else                {                    $field = "field".$v[fieldId];                }                $jxcInfo[0][$field]['type'] = "s";                $jxcInfo[0][$field]['name'] = $v['fieldname'];            }            ( );            $excel = new exportExcel( );            $info = $excel->formatExcelDate( $jxcInfo, $info );            $sheetName = array( "货品档案" );            $excel->init( $info, $sheetName );            $excel->save( CNOA_PATH_FILE."/common/temp/".$fileName, "excel2007" );            msg::callback( TRUE, $fileName );        }        else        {            $fileName = getpar( $_GET, "file", "" );            $file = CNOA_PATH_FILE."/common/temp/".$fileName;            if ( !file_exists( $file ) )            {                echo "文件不存在!";                exit( );            }            if ( $CNOA_DB )            {                $CNOA_DB->close( );            }            @ini_set( "zlib.output_compression", "Off" );            header( "Content-Type: application/octet-stream" );            header( "Content-Disposition: attachment;filename=".cn_urlencode( "货品档案.xlsx" ) );            header( "Content-Length: ".filesize( $file ) );            ob_clean( );            flush( );            readfile( $file );            @unlink( $file );        }        exit( );    }}?>