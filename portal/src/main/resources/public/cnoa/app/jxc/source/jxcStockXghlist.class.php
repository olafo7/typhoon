<?php//decode by qq2859470class jxcStockXghlist extends jxcStock{    public function run( )    {        set_time_limit( 0 );        $task = getpar( $_GET, "task", "" );        switch ( $task )        {        case "loadPage" :            $this->_loadPage( );            exit( );        case "getStorageList" :            $this->_getStorageList( );            exit( );        case "getList" :            $this->_getList( );            exit( );        case "getDetailList" :            $this->_getDetailList( );        }        exit( );    }    private function _loadPage( )    {        global $CNOA_CONTROLLER;        $tplPath = $CNOA_CONTROLLER->appPath."/tpl/default/stock/xghlist.htm";        $CNOA_CONTROLLER->loadExtraTpl( $tplPath );    }    private function _getList( )    {        $data = array( );        $start = intval( getpar( $_POST, "start", 0 ) ) + 1;        $rows = 25;        $end = $start + $rows - 1;        $name = getpar( $_POST, "name" );        $where = "";        $ids = array( 0 );        if ( !empty( $name ) )        {            $where .= $this->utf82gbk( "WHERE NAME_ LIKE '%".$name."%' " );        }        $sql = "SELECT * FROM GOODS ".$where." ROWS {$start} TO {$end}";        new xghdb( );        ( $xghdb );        $query = $xghdb->query( $sql );        while ( $row = $query->fetch( PDO::FETCH_ASSOC ) )        {            $row = $this->gbk2utf8( $row );            $v = array( );            $v['NAME_'] = $row['NAME_'];            $v['UNIT'] = $row['UNIT'];            $v['SPECIAL'] = $row['SPECIAL'];            $v['PY_'] = $row['PY_'];            $v['id'] = $row['ID_'];            $data[] = $v;            $ids[] = $v['id'];        }        $query = $xghdb->query( "SELECT GOODSID,QTY FROM STOCK WHERE GOODSID IN(".implode( ",", $ids ).")" );        $stocks = array( );        while ( $row = $query->fetch( PDO::FETCH_ASSOC ) )        {            if ( isset( $stocks[$row['GOODSID']] ) )            {                $stocks[$row['GOODSID']] += $row['QTY'];            }            else            {                $stocks[$row['GOODSID']] = $row['QTY'];            }        }        if ( !is_array( $data ) )        {            $data = array( );        }        foreach ( $data as $k => $v )        {            $data[$k]['STOCK'] = empty( $stocks[$v['id']] ) ? "0" : intval( $stocks[$v['id']] );            $data[$k]['STOCK'] = sprintf( "%.2f", $data[$k]['STOCK'] );        }        $query = $xghdb->query( "SELECT COUNT(*) AS NUM FROM GOODS ".$where );        $total = $query->fetch( PDO::FETCH_ASSOC );        ( );        $ds = new dataStore( );        $ds->data = $data;        $ds->total = $total['NUM'];        echo $ds->makeJsonData( );    }    private function _getDetailList( )    {        $data = array( );        $id = intval( getpar( $_GET, "id", 0 ) );        $stime = getpar( $_POST, "stime", 0 );        $etime = getpar( $_POST, "etime", 0 );        new xghdb( );        ( $xghdb );        if ( empty( $stime ) )        {            $stime = "2000-01-01";        }        if ( empty( $etime ) )        {            $etime = date( "Y-m-d" );        }        if ( $stime == $etime )        {            $etime = date( "Y-m-d", strtotime( $stime." 00:00:00" ) + 86400 );        }        $sql = "SELECT * FROM P_REPORT_STOCK_DETAIL(".$id.", '{$stime}', '{$etime}')";        $query = $xghdb->query( $sql );        while ( $row = $query->fetch( PDO::FETCH_ASSOC ) )        {            $row = $this->gbk2utf8( $row );            $row['AINCOUNT'] = empty( $row['AINCOUNT'] ) ? "0" : $row['AINCOUNT'];            $row['AOUTCOUNT'] = empty( $row['AOUTCOUNT'] ) ? "0" : $row['AOUTCOUNT'];            $data[] = $row;        }        $INIQTY = 0;        $INICOSTSUM = 0;        $query = $xghdb->query( "SELECT SUM(INIQTY) INIQTY,SUM(INICOSTSUM) INICOSTSUM FROM STOCK A  LEFT JOIN STOREHOUSE B ON A.STOREHOUSE_ID = B.ID_ WHERE (A.GoodsId = '".$id."') AND (B.SHOP_ID = 2)" );        $row = $query->fetch( PDO::FETCH_ASSOC );        $INIQTY = $row['INIQTY'];        $INICOSTSUM = $row['INICOSTSUM'];        if ( !is_array( $data ) )        {            $data = array( );        }        foreach ( $data as $k => $v )        {            if ( $k == 0 )            {                $data[$k]['INIQTY'] = $INIQTY + $data[$k]['AINCOUNT'] - $data[$k]['AOUTCOUNT'];                $data[$k]['INICOSTSUM'] = $INICOSTSUM + $data[$k]['ACOSTSUM'];            }            else            {                $data[$k]['INIQTY'] = $data[$k - 1]['INIQTY'] + $data[$k]['AINCOUNT'] - $data[$k]['AOUTCOUNT'];                $data[$k]['INICOSTSUM'] = $data[$k - 1]['INICOSTSUM'] + $data[$k]['ACOSTSUM'];            }            $data[$k]['INIQTY'] = sprintf( "%.2f", $data[$k]['INIQTY'] );            $data[$k]['INICOSTSUM'] = sprintf( "%.2f", $data[$k]['INICOSTSUM'] );            $data[$k]['ACOSTPRICE'] = sprintf( "%.2f", $data[$k]['ACOSTPRICE'] );            $data[$k]['AINCOUNT'] = sprintf( "%.2f", $data[$k]['AINCOUNT'] );            $data[$k]['AOUTCOUNT'] = sprintf( "%.2f", $data[$k]['AOUTCOUNT'] );            $data[$k]['ABILLDATE'] = date( "Y-m-d", strtotime( $data[$k]['ABILLDATE'] ) );        }        ( );        $ds = new dataStore( );        $ds->data = $data;        echo $ds->makeJsonData( );    }    private function _getStorageList( )    {        $data = array( );        new xghdb( );        ( $xghdb );        $query = $xghdb->query( "SELECT * FROM STOREHOUSE" );        while ( $row = $query->fetch( PDO::FETCH_ASSOC ) )        {            $v = array( );            $v['NAME_'] = $row['NAME_'];            $v['CODE_'] = $row['CODE_'];            $v['PY_'] = $row['PY_'];            $v['id'] = $row['ID_'];            $v = $this->gbk2utf8( $v );            $data[] = $v;        }        ( );        $ds = new dataStore( );        $ds->data = $data;        echo $ds->makeJsonData( );    }    public function gbk2utf8( $value )    {        if ( is_string( $value ) )        {            $value = iconv( "gbk", "utf-8//IGNORE", $value );            return $value;        }        if ( is_array( $value ) )        {            foreach ( $value as $k => $v )            {                $value[$k] = iconv( "gbk", "utf-8//IGNORE", $v );            }        }        return $value;    }    public function utf82gbk( $value )    {        if ( is_string( $value ) )        {            $value = iconv( "utf-8", "gbk//IGNORE", $value );            return $value;        }        if ( is_array( $value ) )        {            foreach ( $value as $k => $v )            {                $value[$k] = iconv( "utf-8", "gbk//IGNORE", $v );            }        }        return $value;    }}?>