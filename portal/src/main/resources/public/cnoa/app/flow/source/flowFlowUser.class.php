<?php//decode by qq2859470class flowFlowUser extends flowCommon{    private $table_sort = "flow_flow_sort";    private $table_dept_sort = "flow_flow_dept_sort";    private $table_list = "flow_flow_list";    private $table_list_node = "flow_flow_list_node";    private $table_form = "flow_flow_form";    private $table_form_item = "flow_flow_form_item";    private $table_u_list = "flow_flow_u_list";    private $table_u_node = "flow_flow_u_node";    private $table_u_formdata = "flow_flow_u_formdata";    private $table_u_event = "flow_flow_u_event";    private $table_u_entrust = "flow_flow_u_entrust";    private $table_u_huiqian = "flow_flow_u_huiqian";    private $eventType = array    (        1 => "开始",        2 => "已办理",        3 => "撤销",        4 => "召回",        5 => "退件",        6 => "退回上一步",        7 => "结束"    );    private $statusType = array    (        1 => "办理中",        2 => "已办理",        3 => "退件"    );    private $entrustType = array    (        0 => "禁用",        1 => "启用",        2 => "未设置"    );    private $viewUrl = "index.php?app=flow&func=flow&action=user&task=loadPage&from=viewflow&ulid=";    private $viewUrlCommonFlow = "index.php?app=flow&func=flow&action=user&module=commonFlow&task=loadPage&from=viewflow&ulid=";    private $cachePath = "";    public function __construct( )    {        $this->cachePath = CNOA_PATH_FILE."/cache";    }    public function __destruct( )    {    }    public function run( )    {        global $CNOA_SESSION;        $task = getpar( $_GET, "task", getpar( $_POST, "task" ) );        if ( $task == "loadPage" )        {            $this->_loadPage( );        }        else if ( $task == "getSortList" )        {            $this->_getSortList( );        }        else if ( $task == "getFlowJsonData" )        {            $this->_getFlowJsonData( );        }        else if ( $task == "getFlowJsonDataForout" )        {            $this->_getFlowJsonDataForout( );        }        else if ( $task == "flowpreviewLoadData" )        {            $this->_flowpreviewLoadData( );        }        else if ( $task == "loadFormData" )        {            $this->_loadFormData( );        }        else if ( $task == "loadFormData2" )        {            $this->_loadFormData2( );        }        else if ( $task == "loadNextStepInfo" )        {            $this->_loadNextStepInfo( );        }        else if ( $task == "sendFlow" )        {            $this->_sendFlow( );        }        else if ( $task == "saveFlow_add" )        {            $this->_saveFlow_add( );        }        else if ( $task == "saveFlow_edit" )        {            $this->_saveFlow_edit( );        }        else if ( $task == "deleteflow" )        {            $this->_deleteflow( );        }        else if ( $task == "getMyFlowJsonData" )        {            $this->_getMyFlowJsonData( );        }        else if ( $task == "recall" )        {            $this->_recall( );        }        else if ( $task == "repeal" )        {            $this->_repeal( );        }        else if ( $task == "getdealflowJsonData" )        {            $this->_getdealflowJsonData( );        }        else if ( $task == "deal_loadNextStepInfo" )        {            $this->_deal_loadNextStepInfo( );        }        else if ( $task == "deal_sendFlow" )        {            $this->_deal_sendFlow( );        }        else if ( $task == "disagree" )        {            $this->_disagree( );        }        else if ( $task == "gotoPrevstep" )        {            $this->_gotoPrevstep( );        }        else if ( $task == "show_loadFlowInfo" )        {            $this->_show_loadFlowInfo( );        }        else if ( $task == "getEntrustJsonData" )        {            $this->_getEntrustJsonData( );        }        else if ( $task == "getAllUserListsInPermitDeptTree" )        {            $this->_getAllUserListsInPermitDeptTree( );        }        else if ( $task == "setEntrust" )        {            $this->_setEntrust( );        }        else if ( $task == "editEntrustLoadForm" )        {            $this->_editEntrustLoadForm( );        }        else if ( $task == "view_loadFlowInfo" )        {            $this->_view_loadFlowInfo( );        }        else if ( $task == "getEventList" )        {            $this->_getEventList( );        }        else if ( $task == "getProgressList" )        {            $this->_getProgressList( );        }        else if ( $task == "exportExcel" )        {            $this->_exportExcel( );        }        else if ( $task == "exportFlow" )        {            app::loadapp( "flow", "flowExportHtml" )->init( );        }        else if ( $task == "dispenseFlow" )        {            $this->_dispenseFlow( );        }        else if ( $task == "getDispenseJsonData" )        {            $this->_getDispenseJsonData( );        }        else if ( $task == "show_loadDispenseFlowInfo" )        {            $this->_show_loadDispenseFlowInfo( );        }        else if ( $task == "getReaderList" )        {            $this->_getReaderList( );        }        else if ( $task == "addDispenseSay" )        {            $this->_addDispenseSay( );        }        else if ( $task == "getHuiQianInfo" )        {            $this->_getHuiQianInfo( );        }        else if ( $task == "setHuiQianInfo" )        {            $this->_setHuiQianInfo( );        }        else if ( $task == "loadHuiQianInfo" )        {            $this->_loadHuiQianInfo( );        }        else if ( $task == "submitHuiQianInfo" )        {            $this->_submitHuiQianInfo( );        }        else if ( $task == "setZhuangbanInfo" )        {            $this->_setZhuangbanInfo( );        }        else if ( $task == "getAutoSaveFormData" )        {            $this->_getAutoSaveFormData( );        }        else if ( $task == "setAutoSaveFormData" )        {            $this->_setAutoSaveFormData( );        }        else if ( $task == "getFlowFrom" )        {            $this->_getFlowFrom( );        }        else if ( $task == "sendNewFlowList" )        {            $this->_sendNewFlowList( );        }    }    private function _getFlowFrom( )    {        $GLOBALS['_GET']['type'] = "combo";        app::loadapp( "flow", "flow" )->api_getSortList( );    }    private function _loadPage( )    {        global $CNOA_SESSION;        global $CNOA_CONTROLLER;        $from = getpar( $_GET, "from", "" );        if ( $from == "flowlist" )        {            $tplPath = $CNOA_CONTROLLER->appPath."/tpl/default/flow/user_flowlist.htm";        }        else if ( $from == "flowlistOut" )        {            $GLOBALS['GLOBALS']['sort'] = getpar( $_GET, "sort", 0 );            $tplPath = $CNOA_CONTROLLER->appPath."/tpl/default/flow/user_flowlistOut.htm";        }        else if ( $from == "newflow" )        {            $this->_loadNewFlowPage( );        }        else if ( $from == "newcommonflow" )        {            $this->_loadNewCommonFlowPage( );        }        else if ( $from == "myflow" )        {            $tplPath = $CNOA_CONTROLLER->appPath."/tpl/default/flow/user_myflow.htm";        }        else if ( $from == "entrust" )        {            $tplPath = $CNOA_CONTROLLER->appPath."/tpl/default/flow/user_entrust.htm";        }        else if ( $from == "dealflow" )        {            $tplPath = $CNOA_CONTROLLER->appPath."/tpl/default/flow/user_dealflow.htm";        }        else if ( $from == "viewflow" )        {            $GLOBALS['GLOBALS']['ulid'] = getpar( $_GET, "ulid", 0 );            $tplPath = $CNOA_CONTROLLER->appPath."/tpl/default/flow/user_viewflow.htm";        }        else if ( $from == "showflow" )        {            $GLOBALS['GLOBALS']['ulid'] = getpar( $_GET, "ulid", 0 );            $tplPath = $CNOA_CONTROLLER->appPath."/tpl/default/flow/user_showflow.htm";        }        else if ( $from == "dispense" )        {            $GLOBALS['GLOBALS']['isread'] = getpar( $_GET, "isread", 0 );            $tplPath = $CNOA_CONTROLLER->appPath."/tpl/default/flow/dispense_list.htm";        }        else if ( $from == "showdispenseflow" )        {            $GLOBALS['GLOBALS']['ulid'] = getpar( $_GET, "ulid", 0 );            $tplPath = $CNOA_CONTROLLER->appPath."/tpl/default/flow/dispense_view.htm";        }        $CNOA_CONTROLLER->loadExtraTpl( $tplPath );        exit( );    }    private function _getSortList( )    {        global $CNOA_DB;        global $CNOA_SESSION;        $uid = $CNOA_SESSION->get( "UID" );        $type = getpar( $_GET, "type", "combo" );        $myJobType = $CNOA_SESSION->get( "JOBTYPE" );        $dblist = $CNOA_DB->db_select( "*", $this->table_sort, "WHERE 1 ORDER BY `order` ASC" );        if ( !is_array( $dblist ) )        {            $dblist = array( );        }        if ( $type == "tree" )        {            $list = array( );            foreach ( $dblist as $v )            {                $r = array( );                $r['text'] = $v['name'];                $r['sid'] = $v['sid'];                $r['iconCls'] = "icon-style-page-key";                $r['leaf'] = TRUE;                $r['href'] = "javascript:void(0);";                $list[] = $r;            }            echo json_encode( $list );            exit( );        }        if ( $type == "combo" )        {            ( );            $dataStore = new dataStore( );            $dataStore->total = count( $dblist );            $dataStore->data = $dblist;            echo $dataStore->makeJsonData( );            exit( );        }    }    private function _getFlowJsonData( )    {        global $CNOA_DB;        global $CNOA_SESSION;        $uid = $CNOA_SESSION->get( "UID" );        $start = getpar( $_POST, "start", 0 );        $rows = 15;        $sort = intval( getpar( $_POST, "sort", 0 ) );        $myJobType = $CNOA_SESSION->get( "JOBTYPE" );        if ( $sort == 0 )        {            $where = "WHERE `publish`=1 ";        }        else        {            $where = "WHERE `publish`=1 AND `sort`='".$sort."' ";        }        $sql = "SELECT  `l`.`name`, `l`.`lid`, `l`.`formid`, `s`.`name` AS `sname` FROM ".tname( $this->table_list )." AS `l` LEFT JOIN ".tname( $this->table_sort )." AS `s` ON `l`.`sort`=`s`.`sid` ".$where."ORDER BY `posttime` DESC ".( "LIMIT ".$start.", {$rows}" );        $dblist = array( );        $formids = array( );        $queryList = $CNOA_DB->query( $sql );        while ( $list = $CNOA_DB->get_array( $queryList ) )        {            $list['posttime'] = date( "Y-m-d H:i", $list['posttime'] );            $formids[$list['lid']] = $list['formid'];            $dblist[] = $list;        }        ( );        $dataStore = new dataStore( );        $dataStore->total = $CNOA_DB->db_getcount( $this->table_list, $where );        $dataStore->data = $dblist;        echo $dataStore->makeJsonData( );        exit( );    }    private function _getFlowJsonDataForout( )    {        global $CNOA_DB;        global $CNOA_SESSION;        $uid = $CNOA_SESSION->get( "UID" );        $sort = intval( getpar( $_GET, "sort", 0 ) );        $where = "WHERE `publish`=1 AND `sort`='".$sort."' ";        $sql = "SELECT  `l`.`name`, `l`.`lid`, `l`.`formid`, `s`.`name` AS `sname` FROM ".tname( $this->table_list )." AS `l` LEFT JOIN ".tname( $this->table_sort )." AS `s` ON `l`.`sort`=`s`.`sid` ".$where."ORDER BY `posttime` DESC ";        $dblist = array( );        $formids = array( );        $queryList = $CNOA_DB->query( $sql );        while ( $list = $CNOA_DB->get_array( $queryList ) )        {            $list['posttime'] = date( "Y-m-d H:i", $list['posttime'] );            $formids[$list['lid']] = $list['formid'];            $dblist[] = $list;        }        ( );        $dataStore = new dataStore( );        $dataStore->total = $CNOA_DB->db_getcount( $this->table_list, $where );        $dataStore->data = $dblist;        echo $dataStore->makeJsonData( );        exit( );    }    private function _flowpreviewLoadData( )    {        app::loadapp( "flow", "flow" )->api_flowpreviewLoadData( );    }    private function _loadFormData( )    {        app::loadapp( "flow", "flow" )->api_loadFormData( );    }    private function _loadFormData2( )    {        global $CNOA_DB;        global $CNOA_SESSION;        $fid = getpar( $_POST, "fid", 0 );        $lid = getpar( $_POST, "lid", 0 );        $cacheForm = $this->cachePath."/flow/flow/form/".$fid.".php";        @include( $cacheForm );        $cacheFormItems = $this->cachePath."/flow/flow/formItems/".$fid.".php";        @include( $cacheFormItems );        $itemsInfo = $CNOA_DB->db_getfield( "formitems", $this->table_list_node, "WHERE `lid`='".$lid."' AND `stepid`=0" );        $itemsInfo = json_decode( $itemsInfo, TRUE );        $content = app::loadapp( "flow", "flowCommon" )->api_parseFormForNewFlow( $GLOBALS['flowFormHtml'], $itemsInfo, $GLOBALS['flowFormItems'] );        $array = array( );        $array['content'] = $content;        ( );        $dataStore = new dataStore( );        $dataStore->data = $array;        echo $dataStore->makeJsonData( );        exit( );    }    private function _loadNewFlowPage( )    {        global $CNOA_DB;        global $CNOA_SESSION;        global $CNOA_CONTROLLER;        $uid = $CNOA_SESSION->get( "UID" );        $sid = $CNOA_SESSION->get( "SID" );        $lid = getpar( $_GET, "lid", 0 );        $ulid = getpar( $_GET, "ulid", 0 );        $GLOBALS['GLOBALS']['ac'] = getpar( $_GET, "ac", "add" );        if ( $GLOBALS['ac'] == "edit" )        {            $uflowInfo = $CNOA_DB->db_getone( "*", $this->table_u_list, "WHERE `uid`='".$uid."' AND `ulid`='{$ulid}'" );            $lid = $uflowInfo['lid'];        }        $flowInfo = $CNOA_DB->db_getone( "*", $this->table_list, "WHERE `lid`='".$lid."'" );        $GLOBALS['GLOBALS']['formready'] = "yes";        if ( !$this->__checkForm( $flowInfo['formid'] ) )        {            $GLOBALS['GLOBALS']['formready'] = "no";        }        $GLOBALS['GLOBALS']['havePermit'] = $this->__isUidInStep( $uid, $lid, 0 );        $GLOBALS['GLOBALS']['lid'] = $lid;        $GLOBALS['GLOBALS']['ulid'] = $ulid;        $GLOBALS['GLOBALS']['fid'] = $flowInfo['formid'];        $GLOBALS['GLOBALS']['havePermit'] = $GLOBALS['havePermit'] ? 1 : 0;        $GLOBALS['GLOBALS']['allowup'] = $CNOA_DB->db_getfield( "allowup", $this->table_list_node, "WHERE `lid`='".$lid."' AND `stepid`='0'" );        if ( $GLOBALS['ac'] == "edit" )        {            $GLOBALS['GLOBALS']['flowName'] = $uflowInfo['flowname'];            $GLOBALS['GLOBALS']['flowNumber'] = $uflowInfo['name'];            $GLOBALS['GLOBALS']['title'] = $uflowInfo['title'];            $GLOBALS['GLOBALS']['level'] = $uflowInfo['level'];            $GLOBALS['GLOBALS']['reason'] = substr( json_encode( str_replace( "'", "\"", $uflowInfo['reason'] ) ), 1, -1 );            $GLOBALS['GLOBALS']['about'] = substr( json_encode( str_replace( "'", "\"", $uflowInfo['about'] ) ), 1, -1 );            $formData = $CNOA_DB->db_select( "*", $this->table_u_formdata, "WHERE `ulid`='".$ulid."'" );            $GLOBALS['GLOBALS']['formData'] = json_encode( $formData );            ( );            $fs = new fs( );            $GLOBALS['GLOBALS']['attach'] = json_encode( $fs->getEditList( json_decode( $uflowInfo['attach'], TRUE ) ) );            $name = $CNOA_DB->db_getfield( "name", $this->table_u_list, "WHERE `ulid`='".$ulid."'" );            app::loadapp( "main", "systemLogs" )->api_addLogs( "update", 73, "流程（".$name."）" );        }        else        {            $GLOBALS['GLOBALS']['level'] = 1;            $GLOBALS['GLOBALS']['flowName'] = $flowInfo['name'];            $GLOBALS['GLOBALS']['flowNumber'] = $flowInfo['number'];            $GLOBALS['GLOBALS']['formData'] = "null";            $GLOBALS['GLOBALS']['attach'] = json_encode( array( ) );            $name = $CNOA_DB->db_getfield( "name", $this->table_u_list, "WHERE `ulid`='".$ulid."'" );            app::loadapp( "main", "systemLogs" )->api_addLogs( "add", 73, "流程（".$name."）" );        }        $tplPath = $CNOA_CONTROLLER->appPath."/tpl/default/flow/user_newflow.htm";        $CNOA_CONTROLLER->loadExtraTpl( $tplPath );        exit( );    }    private function _loadNewCommonFlowPage( )    {        global $CNOA_DB;        global $CNOA_SESSION;        global $CNOA_CONTROLLER;        $tplPath = $CNOA_CONTROLLER->appPath."/tpl/default/flow/user_newcommonflow.htm";        $CNOA_CONTROLLER->loadExtraTpl( $tplPath );        exit( );    }    private function _saveFlow_add( )    {        global $CNOA_DB;        global $CNOA_SESSION;        $uid = $CNOA_SESSION->get( "UID" );        $lid = getpar( $_POST, "lid", 0 );        $data = array( );        $data['lid'] = $lid;        $data['title'] = getpar( $_POST, "title", "" );        $data['level'] = getpar( $_POST, "level", 1 );        $data['reason'] = getpar( $_POST, "reason", "", 1 );        $data['about'] = getpar( $_POST, "about", "", 1 );        $data['posttime'] = $GLOBALS['CNOA_TIMESTAMP'];        $data['uid'] = $uid;        $data['status'] = 0;        $flowInfo = $CNOA_DB->db_getone( "*", $this->table_list, "WHERE `lid`='".$lid."'" );        $data['flowname'] = $flowInfo['name'];        $data['name'] = str_replace( "{F}", $flowInfo['name'], $flowInfo['number'] );        $data['sort'] = $flowInfo['sort'];        ( );        $fs = new fs( );        $filesUpload = getpar( $_POST, "filesUpload", array( ) );        $attch = $fs->add( $filesUpload, 7 );        $data['attach'] = json_encode( $attch );        $ulid = $CNOA_DB->db_insert( $data, $this->table_u_list );        app::loadapp( "main", "systemLogs" )->api_addLogs( "add", 73, $data['title'], "流程" );        foreach ( $GLOBALS['_POST']['FLOWDATA'] as $k => $v )        {            $item = array( );            $item['ulid'] = $ulid;            $item['itemid'] = $k;            $item['uid'] = $uid;            $item['step'] = 0;            $item['posttime'] = $GLOBALS['CNOA_TIMESTAMP'];            $item['data'] = getpar( $_POST['FLOWDATA'], $k, "", 1 );            $CNOA_DB->db_insert( $item, $this->table_u_formdata );        }        header( "Content-type: text/html" );        msg::callback( TRUE, lang( "successopt" ) );    }    private function _saveFlow_edit( )    {        global $CNOA_DB;        global $CNOA_SESSION;        $uid = $CNOA_SESSION->get( "UID" );        $lid = getpar( $_POST, "lid", 0 );        $ulid = getpar( $_POST, "ulid", 0 );        $data = array( );        $data['lid'] = $lid;        $data['title'] = getpar( $_POST, "title", "" );        $data['level'] = getpar( $_POST, "level", 1 );        $data['reason'] = getpar( $_POST, "reason", "", 1 );        $data['about'] = getpar( $_POST, "about", "", 1 );        $data['posttime'] = $GLOBALS['CNOA_TIMESTAMP'];        $data['uid'] = $uid;        $data['status'] = 0;        $flowInfo = $CNOA_DB->db_getone( "*", $this->table_list, "WHERE `lid`='".$lid."'" );        $data['flowname'] = $flowInfo['name'];        $data['name'] = str_replace( "{F}", $flowInfo['name'], $flowInfo['number'] );        $data['sort'] = $flowInfo['sort'];        ( );        $fs = new fs( );        $attach = $CNOA_DB->db_getfield( "attach", $this->table_u_list, "WHERE `ulid`='".$ulid."' AND `uid`='{$uid}'" );        $attch = $fs->edit( getpar( $_POST, "filesUpload", array( ) ), json_decode( $attach, FALSE ), 7 );        $data['attach'] = json_encode( $attch );        $CNOA_DB->db_update( $data, $this->table_u_list, "WHERE `ulid`='".$ulid."' AND `uid`='{$uid}'" );        $CNOA_DB->db_delete( $this->table_u_formdata, "WHERE `ulid`='".$ulid."'" );        foreach ( $GLOBALS['_POST']['FLOWDATA'] as $k => $v )        {            $item = array( );            $item['ulid'] = $ulid;            $item['itemid'] = $k;            $item['data'] = getpar( $_POST['FLOWDATA'], $k, "", 1 );            $item['uid'] = $uid;            $item['posttime'] = $GLOBALS['CNOA_TIMESTAMP'];            $item['step'] = 0;            $CNOA_DB->db_insert( $item, $this->table_u_formdata );        }        header( "Content-type: text/html" );        app::loadapp( "main", "systemLogs" )->api_addLogs( "update", 73, $data['title'], "流程" );        msg::callback( TRUE, lang( "successopt" ) );    }    private function _loadNextStepInfo( )    {        global $CNOA_DB;        global $CNOA_SESSION;        $flowid = getpar( $_POST, "flowid", 0 );        $stepid = intval( getpar( $_POST, "stepid", 0 ) );        $nextstep = $stepid + 1;        $nextInfo = $CNOA_DB->db_getone( array( "name", "operatorperson", "operatortype", "operator", "type" ), $this->table_list_node, "WHERE `lid`='".$flowid."' AND `stepid`='{$nextstep}'" );        $nextMans = $this->__getAllUidsInStep( $flowid, $nextstep );        $nextUids = $nextMans['uid'];        $userList = app::loadapp( "main", "user" )->api_getUserInfoByUids( $nextUids );        $stationList = app::loadapp( "main", "station" )->api_getStationList( );        if ( !is_array( $userList ) )        {            $userList = array( );        }        if ( !is_array( $stationList ) )        {            $stationList = array( );        }        if ( $nextInfo['type'] == "end" )        {            $nextInfo['nextStepType'] = "end";        }        $users = array( );        foreach ( $userList as $v )        {            $station = $stationList[intval( $v['stationid'] )]['name'] == NULL ? "" : " (".$stationList[intval( $v['stationid'] )]['name'].")";            $u = array( );            $u['uid'] = $v['uid'];            $u['name'] = $v['truename'].$station;            $users[] = $u;        }        $nextInfo['operator'] = $users;        ( );        $dataStore = new dataStore( );        $dataStore->data = $nextInfo;        echo $dataStore->makeJsonData( );        exit( );    }    private function _sendFlow( )    {        global $CNOA_DB;        global $CNOA_SESSION;        $flowName = "";        $uid = $CNOA_SESSION->get( "UID" );        $lid = getpar( $_POST, "lid", 0 );        $ulid = intval( getpar( $_POST, "ulid", 0 ) );        $data = array( );        $data['lid'] = $lid;        $data['title'] = getpar( $_POST, "title", "" );        $data['level'] = getpar( $_POST, "level", 1 );        $data['reason'] = getpar( $_POST, "reason", "", 1 );        $data['about'] = getpar( $_POST, "about", "", 1 );        $data['posttime'] = $GLOBALS['CNOA_TIMESTAMP'];        $data['uid'] = $uid;        $data['step'] = 1;        $data['status'] = 1;        $reason = $data['reason'];        $this->__checkFlow( $lid );        $flowInfo = $CNOA_DB->db_getone( "*", $this->table_list, "WHERE `lid`='".$lid."'" );        $data['flowname'] = $flowInfo['name'];        $data['name'] = $flowName = $this->__getNumber( $lid );        $data['sort'] = $flowInfo['sort'];        $itemsInfo = $CNOA_DB->db_getfield( "formitems", $this->table_list_node, "WHERE `lid`='".$lid."' AND `stepid`=0" );        $itemsInfo = json_decode( $itemsInfo, TRUE );        if ( !is_array( $itemsInfo ) )        {            $itemsInfo = array( );        }        $itemsInfoData = array( );        foreach ( $itemsInfo as $itemsInfok => $itemsInfov )        {            $itemsInfoData[$itemsInfov['itemid']] = $itemsInfov;        }        $nextItemsInfo = $CNOA_DB->db_getone( "*", $this->table_list_node, "WHERE `lid`='".$lid."' AND `stepid`=1" );        if ( $nextItemsInfo['type'] == "end" )        {            $data['status'] = 2;        }        if ( $ulid == 0 )        {            ( );            $fs = new fs( );            $filesUpload = getpar( $_POST, "filesUpload", array( ) );            $attch = $fs->add( $filesUpload, 7 );            $data['attach'] = json_encode( $attch );            $ulid = $CNOA_DB->db_insert( $data, $this->table_u_list );            if ( !is_array( $_POST['FLOWDATA'] ) )            {                $GLOBALS['_POST']['FLOWDATA'] = array( );            }            foreach ( $GLOBALS['_POST']['FLOWDATA'] as $k => $v )            {                $item = array( );                $item['ulid'] = $ulid;                $item['itemid'] = $k;                $item['data'] = getpar( $_POST['FLOWDATA'], $k, "", 1 );                $item['uid'] = $uid;                $item['posttime'] = $GLOBALS['CNOA_TIMESTAMP'];                $item['step'] = 0;                if ( !( $itemsInfoData[$item['itemid']]['need'] == 1 ) || !( $itemsInfoData[$item['itemid']]['used'] == 1 ) )                {                    $CNOA_DB->db_insert( $item, $this->table_u_formdata );                }            }        }        else        {            ( );            $fs = new fs( );            $attach = $CNOA_DB->db_getfield( "attach", $this->table_u_list, "WHERE `ulid`='".$ulid."' AND `uid`='{$uid}'" );            $attch = $fs->edit( getpar( $_POST, "filesUpload", array( ) ), json_decode( $attach, FALSE ), 7 );            $data['attach'] = json_encode( $attch );            $CNOA_DB->db_update( $data, $this->table_u_list, "WHERE `ulid`='".$ulid."' AND `uid`='{$uid}'" );            $CNOA_DB->db_delete( $this->table_u_formdata, "WHERE `ulid`='".$ulid."'" );            if ( !is_array( $_POST['FLOWDATA'] ) )            {                $GLOBALS['_POST']['FLOWDATA'] = array( );            }            foreach ( $GLOBALS['_POST']['FLOWDATA'] as $k => $v )            {                $item = array( );                $item['ulid'] = $ulid;                $item['itemid'] = $k;                $item['data'] = getpar( $_POST['FLOWDATA'], $k, "", 1 );                $item['uid'] = $uid;                $item['posttime'] = $GLOBALS['CNOA_TIMESTAMP'];                $item['step'] = 0;                if ( !( $itemsInfoData[$item['itemid']]['need'] == 1 ) || !( $itemsInfoData[$item['itemid']]['used'] == 1 ) )                {                    $CNOA_DB->db_insert( $item, $this->table_u_formdata );                }            }        }        $cachePath = $this->cachePath.( "/flow/user/".$ulid."/" );        @mkdirs( $cachePath );        $cacheFile = array( );        $cacheFile['flow'] = $cachePath."flow.php";        $cacheData['flow'] = $flowInfo;        file_put_contents( $cacheFile['flow'], "\r\nreturn ".var_export( $cacheData['flow'], TRUE ).";" );        $cacheFile['flow_node'] = $cachePath."flow_node.php";        $cacheData['flow_node'] = $CNOA_DB->db_select( "*", $this->table_list_node, "WHERE `lid`='".$lid."' ORDER BY `stepid` ASC" );        file_put_contents( $cacheFile['flow_node'], "<?php\r\nreturn ".var_export( $cacheData['flow_node'], TRUE ).";" );        $cacheFile['form'] = $cachePath."form.php";        @include( $this->cachePath."/flow/flow/form/".$flowInfo['formid'].".php" );        $cacheData['form'] = $GLOBALS['flowFormHtml'];        file_put_contents( $cacheFile['form'], "<?php\r\nreturn ".var_export( $cacheData['form'], TRUE ).";" );        $cacheFile['form_item'] = $cachePath."form_item.php";        @include( $this->cachePath."/flow/flow/formItems/".$flowInfo['formid'].".php" );        $cacheData['form_item'] = $GLOBALS['flowFormItems'];        file_put_contents( $cacheFile['form_item'], "<?php\r\nreturn ".var_export( $cacheData['form_item'], TRUE ).";" );        if ( !is_array( $GLOBALS['flowFormItems'] ) )        {            $GLOBALS['GLOBALS']['flowFormItems'] = array( );        }        foreach ( $GLOBALS['GLOBALS']['flowFormItems'] as $itv )        {            $item = array( );            $item['ulid'] = $ulid;            $item['itemid'] = $itv['itemid'];            $item['uid'] = $uid;            $item['posttime'] = $GLOBALS['CNOA_TIMESTAMP'];            $item['step'] = 0;            if ( $itv['type'] == "SYS_FLOWTITLE" )            {                $item['data'] = $data['title'];                $CNOA_DB->db_insert( $item, $this->table_u_formdata );            }            if ( $itv['type'] == "SYS_FLOWNAME" )            {                $item['data'] = $data['name'];                $CNOA_DB->db_insert( $item, $this->table_u_formdata );            }        }        $this->__eventAdd( $ulid, 1, 0, $cacheData['flow_node'][0]['name'], $reason );        unset( $data );        $data = array( );        $data['ulid'] = $ulid;        $data['stepid'] = 0;        $data['say'] = $reason;        $data['status'] = 2;        $data['nodename'] = $cacheData['flow_node'][0]['name'];        $data['stime'] = $GLOBALS['CNOA_TIMESTAMP'];        $data['uid'] = $uid;        $data['operatortype'] = 1;        $data['attachdown'] = $cacheData['flow_node'][0]['allowdown'];        $data['attachup'] = $cacheData['flow_node'][0]['allowup'];        $data['sponsor'] = 1;        $CNOA_DB->db_insert( $data, $this->table_u_node );        if ( $nextItemsInfo['type'] != "end" )        {            unset( $data );            $data = array( );            $nextUids = explode( ",", getpar( $_POST, "nextUids", "" ) );            $data['ulid'] = $ulid;            $data['stepid'] = 1;            $data['status'] = 1;            $data['nodename'] = $cacheData['flow_node'][$data['stepid']]['name'];            $data['stime'] = $GLOBALS['CNOA_TIMESTAMP'];            $data['operatortype'] = $cacheData['flow_node'][$data['stepid']]['operatortype'];            $data['attachdown'] = $cacheData['flow_node'][$data['stepid']]['allowdown'];            $data['attachup'] = $cacheData['flow_node'][$data['stepid']]['allowup'];            $data['sponsor'] = 1;            foreach ( $nextUids as $v )            {                $data['uid'] = $v;                $noticeT = "工作流管理";                $noticeC = "你有一个工作需要审批, [".$flowName."]";                $noticeH = $this->viewUrl.$ulid;                $data['noticeid_c'] = notice::add( $v, $noticeT, $noticeC, $noticeH, 0, 5 );                $notice['touid'] = $v;                $notice['from'] = 5;                $notice['fromid'] = 0;                $notice['href'] = $noticeH;                $notice['title'] = $noticeC;                $notice['content'] = "";                $notice['funname'] = "工作流管理";                $notice['move'] = "审批";                $data['todoid_c'] = notice::add2( $notice );                $CNOA_DB->db_insert( $data, $this->table_u_node );                $data['sponsor'] = 0;                if ( $cacheData['flow_node'][$data['stepid']]['smsdeal'] == "1" )                {                    $this->sendSmsDeal( $ulid, $flowName, $v, $reason );                }            }        }        $this->__clearAutoSaveFormData( $lid );        msg::callback( TRUE, lang( "successopt" ) );    }    private function _deleteflow( )    {        global $CNOA_DB;        global $CNOA_SESSION;        $uid = $CNOA_SESSION->get( "UID" );        $ulid = getpar( $_POST, "ulid", 0 );        $flowInfo = $CNOA_DB->db_getone( "*", $this->table_u_list, "WHERE `ulid`='".$ulid."' AND `uid`='{$uid}'" );        if ( !$flowInfo )        {            msg::callback( FALSE, lang( "nodata" ) );        }        $CNOA_DB->db_delete( $this->table_u_list, "WHERE `ulid`='".$ulid."'" );        app::loadapp( "main", "systemLogs" )->api_addLogs( "del", 74, $flowInfo['name'], "删除流程" );        $CNOA_DB->db_delete( $this->table_u_node, "WHERE `ulid`='".$ulid."'" );        $CNOA_DB->db_delete( $this->table_u_formdata, "WHERE `ulid`='".$ulid."'" );        $CNOA_DB->db_delete( $this->table_u_event, "WHERE `ulid`='".$ulid."'" );        $cachePath = $this->cachePath.( "/flow/user/".$ulid."/" );        $cacheFile = array( );        $cacheFile['flow'] = $cachePath."flow.php";        $cacheFile['flow_node'] = $cachePath."flow_node.php";        $cacheFile['form'] = $cachePath."form.php";        $cacheFile['form_item'] = $cachePath."form_item.php";        foreach ( $cacheFile as $v )        {            @unlink( $v );        }        @rmdir( $cachePath );        ( );        $fs = new fs( );        $fs->deleteFile( json_decode( $flowInfo['attach'], TRUE ) );        msg::callback( TRUE, lang( "successopt" ) );    }    private function _getMyFlowJsonData( )    {        global $CNOA_DB;        global $CNOA_SESSION;        $uid = $CNOA_SESSION->get( "UID" );        $start = getpar( $_POST, "start", 0 );        $rows = 15;        $sort = intval( getpar( $_POST, "sort", 0 ) );        if ( $sort == 0 )        {            $where = "WHERE `uid`='".$uid."' ";        }        else        {            $where = "WHERE `sort`='".$sort."' AND `uid`='{$uid}'";        }        $where .= $this->__findFlowInfo( );        $order = "ORDER BY `posttime` DESC LIMIT ".$start.", {$rows} ";        $dbList = $CNOA_DB->db_select( "*", $this->table_u_list, $where.$order );        if ( !is_array( $dbList ) )        {            $dbList = array( );        }        foreach ( $dbList as $k => $v )        {            $dbList[$k]['posttime'] = date( "Y-m-d H:i", $v['posttime'] );            if ( $v['level'] == 2 )            {                $dbList[$k]['level'] = "<span class='cnoa_color_orange'>重要</span>";            }            else if ( $v['level'] == 3 )            {                $dbList[$k]['level'] = "<span class='cnoa_color_red'>非常重要</span>";            }            else            {                $dbList[$k]['level'] = "普通";            }            if ( $v['flowtype'] == "0" )            {                if ( $v['status'] == 0 )                {                    $dbList[$k]['step'] = $CNOA_DB->db_getfield( "name", $this->table_list_node, "WHERE `lid`='".$v['lid']."' AND `stepid`='0'" );                }                else                {                    $cacheFile = include( $this->cachePath.( "/flow/user/".$v['ulid']."/" )."flow_node.php" );                    $dbList[$k]['step'] = $cacheFile[$v['step']]['name'];                }            }            else if ( $v['flowtype'] == "1" )            {                $cacheFile = include( $this->cachePath.( "/flow/user/".$v['ulid']."/" )."flow_node.php" );                $dbList[$k]['step'] = $cacheFile[$v['step']]['name'];            }        }        ( );        $dataStore = new dataStore( );        $dataStore->total = $CNOA_DB->db_getcount( $this->table_u_list, $where );        $dataStore->data = $dbList;        echo $dataStore->makeJsonData( );        exit( );    }    private function _recall( )    {        global $CNOA_DB;        global $CNOA_SESSION;        $uid = $CNOA_SESSION->get( "UID" );        $ulid = getpar( $_POST, "ulid", 0 );        $flowInfo = $CNOA_DB->db_getone( "*", $this->table_u_list, "WHERE `ulid`='".$ulid."' AND `uid`='{$uid}'" );        if ( !$flowInfo )        {            msg::callback( FALSE, "无此流程" );        }        if ( $flowInfo['status'] != 1 )        {            msg::callback( FALSE, "当前流程状态不是\"处理中\"，无法召回" );        }        $stepInfo = $CNOA_DB->db_select( "*", $this->table_u_node, "WHERE `ulid`='".$ulid."' AND `stepid`='{$flowInfo['step']}'" );        if ( !is_array( $stepInfo ) )        {            $stepInfo = array( );        }        foreach ( $stepInfo as $stv )        {            notice::deletenotice( $stv['noticeid_c'], $stv['todoid_c'] );        }        $CNOA_DB->db_delete( $this->table_u_node, "WHERE `ulid`='".$ulid."'" );        $cachePath = $this->cachePath.( "/flow/user/".$ulid."/" );        $cacheFile = array( );        $cacheFile['flow'] = $cachePath."flow.php";        $cacheFile['flow_node'] = $cachePath."flow_node.php";        $cacheFile['form'] = $cachePath."form.php";        $cacheFile['form_item'] = $cachePath."form_item.php";        $flowFormDataStepData = include( $cacheFile['flow_node'] );        $flowFormItems = json_decode( $flowFormDataStepData[0]['formitems'], TRUE );        if ( !is_array( $flowFormItems ) )        {            $flowFormItems = array( );        }        $formItems = array( );        foreach ( $flowFormItems as $v )        {            if ( !( $v['need'] == 1 ) || !( $v['muse'] == 1 ) )            {                $formItems[] = $v['itemid'];            }        }        if ( 0 < count( $formItems ) )        {            $CNOA_DB->db_delete( $this->table_u_formdata, "WHERE `ulid`='".$ulid."' AND `itemid` NOT IN (".implode( ",", $formItems ).")" );        }        foreach ( $cacheFile as $v )        {            @unlink( $v );        }        $this->__eventAdd( $ulid, 4, 0, "----", "召回流程" );        $CNOA_DB->db_update( array( "status" => 0, "step" => 0 ), $this->table_u_list, "WHERE `ulid`='".$ulid."'" );        app::loadapp( "main", "systemLogs" )->api_addLogs( "", 74, $flowInfo['name'], "召回流程" );        msg::callback( TRUE, lang( "successopt" ) );    }    private function _repeal( )    {        global $CNOA_DB;        global $CNOA_SESSION;        $uid = $CNOA_SESSION->get( "UID" );        $ulid = getpar( $_POST, "ulid", 0 );        $flowInfo = $CNOA_DB->db_getone( "*", $this->table_u_list, "WHERE `ulid`='".$ulid."' AND `uid`='{$uid}'" );        if ( !$flowInfo )        {            msg::callback( FALSE, "无此流程" );        }        if ( $flowInfo['status'] != 1 )        {            msg::callback( FALSE, "当前流程状态不是\"处理中\"，无法撤销" );        }        $stepInfo = $CNOA_DB->db_select( "*", $this->table_u_node, "WHERE `ulid`='".$ulid."' AND `stepid`='{$flowInfo['step']}'" );        if ( !is_array( $stepInfo ) )        {            $stepInfo = array( );        }        foreach ( $stepInfo as $stv )        {            notice::deletenotice( $stv['noticeid_c'], $stv['todoid_c'] );        }        $this->__eventAdd( $ulid, 3, 0, "----", "撤销流程" );        $CNOA_DB->db_update( array( "status" => 4 ), $this->table_u_list, "WHERE `ulid`='".$ulid."'" );        app::loadapp( "main", "systemLogs" )->api_addLogs( "", 74, $flowInfo['name'], "撤销流程" );        msg::callback( TRUE, lang( "successopt" ) );    }    private function _getdealflowJsonData( )    {        global $CNOA_DB;        global $CNOA_SESSION;        $uid = $CNOA_SESSION->get( "UID" );        $start = getpar( $_POST, "start", 0 );        $rows = 15;        $entrustInfo = $CNOA_DB->db_select( array( "fromuid" ), $this->table_u_entrust, "WHERE `touid`='".$uid."' AND `status`=1 AND `stime`<={$GLOBALS['CNOA_TIMESTAMP']} AND `etime`>={$GLOBALS['CNOA_TIMESTAMP']}" );        if ( !$entrustInfo )        {            $sqlEntrust = "";        }        else        {            $entUids = array( );            foreach ( $entrustInfo as $v )            {                $entUids[] = $v['fromuid'];            }            $sqlEntrust = " OR `uid` IN (".implode( ",", $entUids ).") ";            unset( $entUids );        }        unset( $entrustInfo );        $sWhere = $this->__findFlowInfo( );        $ulidsArray = $CNOA_DB->db_select( array( "ulid" ), $this->table_u_node, "WHERE `uid`='".$uid."' {$sqlEntrust} " );        if ( !is_array( $ulidsArray ) )        {            $ulidsArray = array( );        }        $ulids = array( 0 );        foreach ( $ulidsArray as $uldv )        {            $ulids[] = $uldv['ulid'];        }        $ulids = array_merge( array_unique( $ulids ) );        $sql = "`ulid` IN (".implode( ",", $ulids ).")";        $where = "WHERE ".$sq."{$sWhere} ORDER BY `posttime` DESC LIMIT {$start},{$rows}";        $dbList = $CNOA_DB->db_select( "*", $this->table_u_list, $where );        if ( !is_array( $dbList ) )        {            $dbList = array( );        }        $uids = array( );        foreach ( $dbList as $k => $v )        {            if ( $v['level'] == 2 )            {                $dbList[$k]['level'] = "<span class='cnoa_color_orange'>重要</span>";            }            else if ( $v['level'] == 3 )            {                $dbList[$k]['level'] = "<span class='cnoa_color_red'>非常重要</span>";            }            else            {                $dbList[$k]['level'] = "普通";            }            $dbList[$k]['posttime'] = date( "Y-m-d H:i", $v['posttime'] );            $uids[] = $v['uid'];            if ( $v['status'] == 0 )            {                $dbList[$k]['stepText'] = $CNOA_DB->db_getfield( "name", $this->table_list_node, "WHERE `lid`='".$v['lid']."' AND `stepid`='0'" );            }            else            {                $cacheFile = include( $this->cachePath.( "/flow/user/".$v['ulid']."/" )."flow_node.php" );                $dbList[$k]['stepText'] = $cacheFile[$v['step']]['name'];                $allowOperate = $CNOA_DB->db_getone( array( "uid" ), $this->table_u_node, "WHERE `ulid`='".$v['ulid']."' AND (`uid`='{$uid}' {$sqlEntrust}) AND `stepid`='{$v['step']}' AND (`status`=1 OR `status`=3)" );                $allowOperate2 = $CNOA_DB->db_getone( array( "to_uid" ), $this->table_u_huiqian, " WHERE `to_uid`='".$uid."' AND `stepid`='{$v['step']}' AND `ulid`='{$v['ulid']}' AND `isread`=0" );                if ( $allowOperate || $allowOperate2 )                {                    if ( !( $v['status'] == 1 ) || !( $v['status'] == 3 ) )                    {                        $dbList[$k]['allowOperate'] = 1;                    }                }                else                {                    $dbList[$k]['allowOperate'] = 0;                }            }        }        $usersInfo = app::loadapp( "main", "user" )->api_getUserNamesByUids( $uids );        foreach ( $dbList as $k => $v )        {            $dbList[$k]['uname'] = $usersInfo[$v['uid']]['truename'];        }        ( );        $dataStore = new dataStore( );        $dataStore->total = $CNOA_DB->db_getcount( $this->table_u_list, "WHERE ".$sq."{$sWhere} " );        $dataStore->data = $dbList;        echo $dataStore->makeJsonData( );        exit( );    }    private function _view_loadFlowInfo( )    {        global $CNOA_DB;        global $CNOA_SESSION;        $uid = $CNOA_SESSION->get( "UID" );        $sid = $CNOA_SESSION->get( "SID" );        $ulid = getpar( $_POST, "ulid", 0 );        $this->__addDespanseSayDefault( $uid, $ulid );        $flowInfo = $CNOA_DB->db_getone( "*", $this->table_u_list, "WHERE `ulid`='".$ulid."'" );        if ( $flowInfo !== FALSE )        {            $flowInfo['uname'] = app::loadapp( "main", "user" )->api_getUserTruenameByUid( $flowInfo['uid'] );        }        $flowInfo['posttime'] = date( "Y年m月d日 H时i分", $flowInfo['posttime'] );        $cacheFile = include( $this->cachePath.( "/flow/user/".$flowInfo['ulid']."/" )."flow_node.php" );        $flowInfo['stepText'] = $cacheFile[$flowInfo['step']]['name'];        $isHuiQian = $CNOA_DB->db_getone( "*", $this->table_u_node, "WHERE `ulid`='".$ulid."' AND `uid`='{$uid}' AND `stepid`='{$flowInfo['step']}'" );        $isHuiQian = $isHuiQian === FALSE ? "1" : "0";        $flowInfo['allowup'] = $cacheFile[$flowInfo['step']]['allowup'];        $flowInfo['allowdown'] = $cacheFile[$flowInfo['step']]['allowdown'];        if ( $cacheFile[$flowInfo['step']]['type'] == "end" )        {            $flowInfo['allowdown'] = "1";        }        if ( $flowInfo['allowdown'] == "1" )        {            ( );            $fs = new fs( );            $flowInfo['attach'] = json_decode( $flowInfo['attach'], TRUE );            $flowInfo['attachCount'] = !$flowInfo['attach'] ? 0 : count( $flowInfo['attach'] );            $flowInfo['attach'] = $fs->getDownLoadItems4normal( $flowInfo['attach'], TRUE, TRUE, TRUE );        }        else        {            $flowInfo['attachCount'] = 0;        }        if ( $flowInfo['status'] == 0 )        {            $flowInfo['statusText'] = "未发布";        }        else if ( $flowInfo['status'] == 1 )        {            $flowInfo['statusText'] = "办理中";        }        else if ( $flowInfo['status'] == 2 )        {            $flowInfo['statusText'] = "已办理";        }        else if ( $flowInfo['status'] == 3 )        {            $flowInfo['statusText'] = "已退件";        }        else if ( $flowInfo['status'] == 4 )        {            $flowInfo['statusText'] = "已撤销";        }        if ( $flowInfo['flowtype'] == "0" )        {            $cacheFile_form = include( $this->cachePath.( "/flow/user/".$ulid."/form.php" ) );            $cacheFile_form_item = include( $this->cachePath.( "/flow/user/".$ulid."/form_item.php" ) );            $cacheFile_flow_node = include( $this->cachePath.( "/flow/user/".$ulid."/flow_node.php" ) );            $itemsInfo = json_decode( $cacheFile_flow_node[$flowInfo['step']]['formitems'], TRUE );            $formData = $CNOA_DB->db_select( "*", $this->table_u_formdata, "WHERE `ulid`='".$ulid."'" );            if ( $flowInfo['step'] == 0 && $flowInfo['status'] == 1 )            {                $content = app::loadapp( "flow", "flowCommon" )->api_parseFormForNewFlow( $cacheFile_form, $itemsInfo, $cacheFile_form_item );            }            else            {                $content = app::loadapp( "flow", "flowCommon" )->api_parseFormForNextFlowStep( $cacheFile_form, $itemsInfo, $formData, $cacheFile_form_item, $cacheFile[$flowInfo['step']] );            }        }        $flowNodeInfo = $CNOA_DB->db_getone( "*", $this->table_u_node, "WHERE `ulid`='".$ulid."' AND `stepid`='{$flowInfo['step']}'" );        $isEntrust = $CNOA_DB->db_getone( "*", $this->table_u_entrust, "WHERE `fromuid`='".$flowNodeInfo['uid']."' AND `touid`='{$uid}' AND `status`=1 AND `stime`<={$GLOBALS['CNOA_TIMESTAMP']} AND `etime`>={$GLOBALS['CNOA_TIMESTAMP']}" );        $isEntrust = $isEntrust !== FALSE ? "1" : "0";        $data = array( );        $data['flowInfo'] = $flowInfo;        $data['formInfo'] = $content;        $data['formData'] = $formData;        $data['isHuiQian'] = $isHuiQian;        $data['isEntrust'] = $isEntrust;        ( );        $dataStore = new dataStore( );        $dataStore->total = 0;        $dataStore->data = $data;        echo $dataStore->makeJsonData( );        exit( );    }    private function replaceHTML( $html, $data )    {        $dataTmp = array( );        if ( empty( $html ) || !isset( $html ) && empty( $data ) || !isset( $data ) )        {            return "无工作表单";        }        foreach ( $data as $v )        {            $dataTmp[$v['itemid']] = $v;        }        preg_match_all( "/<((input|textarea))[^>]*>/is", $html, $arr );        $str_source = array( );        $str_target = array( );        foreach ( $arr[0] as $k => $v )        {            $itemid = preg_replace( "/.*itemid\\=\"([0-9]{1,})\".*/is", "\\1", $v );            $str_source[$itemid] = $v;            if ( strtolower( $arr[1][$k] ) == "input" )            {                $v = str_replace( "<input", "<input value=\"".$dataTmp[$itemid]['data']."\"", $v );            }            else if ( strtolower( $arr[1][$k] ) == "textarea" )            {                $v = str_replace( ">", ">".$dataTmp[$itemid]['data'], $v );            }            $str_target[] = $v;        }        $html = str_replace( $str_source, $str_target, $html );        preg_match_all( "/<select[^>]*>(.*?)<\\/select>/is", $html, $arr );        $str_source = array( );        $str_target = array( );        foreach ( $arr[0] as $k => $v )        {            $itemid = preg_replace( "/.*itemid\\=\"([0-9]{1,})\".*/is", "\\1", $v );            $str_source[$itemid] = $v;            $v = str_replace( array(                " selected=\"selected\"",                "value=\"".$dataTmp[$itemid]['data']."\""            ), array(                "",                "value=\"".$dataTmp[$itemid]['data']."\" selected=\"selected\""            ), $v );            $str_target[] = $v;        }        $html = str_replace( $str_source, $str_target, $html );        return $html;    }    private function _deal_loadNextStepInfo( )    {        global $CNOA_DB;        global $CNOA_SESSION;        $uid = $CNOA_SESSION->get( "UID" );        $ulid = getpar( $_POST, "ulid", 0 );        $flowInfo = $CNOA_DB->db_getone( "*", $this->table_u_list, "WHERE `ulid`='".$ulid."'" );        $entrustInfo = $CNOA_DB->db_select( array( "fromuid" ), $this->table_u_entrust, "WHERE `touid`='".$uid."' AND `status`=1 AND `stime`<={$GLOBALS['CNOA_TIMESTAMP']} AND `etime`>={$GLOBALS['CNOA_TIMESTAMP']}" );        if ( !$entrustInfo )        {            $sqlEntrust = "";        }        else        {            $entUids = array( );            foreach ( $entrustInfo as $v )            {                $entUids[] = $v['fromuid'];            }            $sqlEntrust = " OR `uid` IN (".implode( ",", $entUids ).") ";            unset( $entUids );        }        unset( $entrustInfo );        $nowStep = $flowInfo['step'];        $flowNodeInfo = $CNOA_DB->db_getone( "*", $this->table_u_node, "WHERE `ulid`='".$ulid."' AND `stepid`='{$nowStep}' AND (`uid`='{$uid}' {$sqlEntrust})" );        if ( !$flowNodeInfo )        {            msg::callback( FALSE, "你不是当前流程该步骤的办理人，不能办理!" );        }        $data = array( );        $nextstep = $nowStep + 1;        $cacheFile_flow_node = include( $this->cachePath.( "/flow/user/".$ulid."/flow_node.php" ) );        $nextInfo = $cacheFile_flow_node[$nextstep];        if ( $nextInfo['type'] == "end" )        {            $data['nextStepType'] = "end";        }        else        {            if ( $flowNodeInfo['sponsor'] == 1 || $flowNodeInfo['operatortype'] == 1 )            {                $data['sponsor'] = 1;                $nextMans = $this->__getAllUidsInStepByOperator( $nextInfo['operator'] );                $nextUids = $nextMans['uid'];                $userList = app::loadapp( "main", "user" )->api_getUserInfoByUids( $nextUids );                $stationList = app::loadapp( "main", "station" )->api_getStationList( );                if ( !is_array( $userList ) )                {                    $userList = array( );                }                if ( !is_array( $stationList ) )                {                    $stationList = array( );                }                $users = array( );                foreach ( $userList as $v )                {                    $station = $stationList[intval( $v['stationid'] )]['name'] == NULL ? "" : " (".$stationList[intval( $v['stationid'] )]['name'].")";                    $u = array( );                    $u['uid'] = $v['uid'];                    $u['name'] = $v['truename'].$station;                    $users[] = $u;                }                $nextInfo['operator'] = $users;            }            else            {                $data['sponsor'] = 0;            }            $data['nextStepType'] = "node";        }        $data['nextData'] = $nextInfo;        ( );        $dataStore = new dataStore( );        $dataStore->data = $data;        echo $dataStore->makeJsonData( );        exit( );    }    private function _deal_sendFlow( )    {        global $CNOA_DB;        global $CNOA_SESSION;        $uid = $CNOA_SESSION->get( "UID" );        $ulid = getpar( $_POST, "ulid", 0 );        $nextUids = getpar( $_POST, "nextUids", 0 );        $say = getpar( $_POST, "say", "", 1 );        $data = array( );        $cacheFile_flow_node = include( $this->cachePath.( "/flow/user/".$ulid."/flow_node.php" ) );        $entrustInfo = $CNOA_DB->db_select( array( "fromuid" ), $this->table_u_entrust, "WHERE `touid`='".$uid."' AND `status`=1 AND `stime`<={$GLOBALS['CNOA_TIMESTAMP']} AND `etime`>={$GLOBALS['CNOA_TIMESTAMP']}" );        if ( !$entrustInfo )        {            $sqlEntrust = "";        }        else        {            $entUids = array( );            foreach ( $entrustInfo as $v )            {                $entUids[] = $v['fromuid'];            }            $sqlEntrust = " OR `uid` IN (".implode( ",", $entUids ).") ";            unset( $entUids );        }        unset( $entrustInfo );        $flowInfo = $CNOA_DB->db_getone( "*", $this->table_u_list, "WHERE `ulid`='".$ulid."'" );        $nowStep = $flowInfo['step'];        $flowNodeInfo = $CNOA_DB->db_getone( "*", $this->table_u_node, "WHERE `ulid`='".$ulid."' AND `stepid`='{$nowStep}' AND (`uid`='{$uid}' {$sqlEntrust})" );        if ( !$flowNodeInfo )        {            msg::callback( FALSE, "你不是当前流程该步骤的办理人，不能办理!" );        }        ( );        $fs = new fs( );        $attachOld = json_decode( $flowInfo['attach'], TRUE );        if ( !is_array( $attachOld ) )        {            $attachOld = array( );        }        $filesUpload = getpar( $_POST, "filesUpload", array( ) );        $attachNew = $fs->add( $filesUpload, 7 );        $attach = json_encode( array_merge( $attachOld, $attachNew ) );        $CNOA_DB->db_update( array(            "attach" => $attach        ), $this->table_u_list, "WHERE `ulid`='".$ulid."'" );        $data['say'] = $say;        $data['status'] = 2;        $data['etime'] = $GLOBALS['CNOA_TIMESTAMP'];        $info = $CNOA_DB->db_getone( "*", $this->table_u_node, "WHERE `ulid`='".$ulid."' AND `stepid`='{$nowStep}' AND (`uid`='{$uid}' {$sqlEntrust})" );        notice::donen( $info['noticeid_c'] );        notice::donet( $info['todoid_c'] );        $CNOA_DB->db_update( $data, $this->table_u_node, "WHERE `ulid`='".$ulid."' AND `stepid`='{$nowStep}' AND (`uid`='{$uid}' {$sqlEntrust})" );        $flowFormitems = json_decode( $cacheFile_flow_node[$nowStep]['formitems'], TRUE );        if ( !is_array( $flowFormitems ) )        {            $flowFormitems = array( );        }        foreach ( $flowFormitems as $v )        {            if ( !( $v['need'] == 1 ) || !( $v['must'] == 1 ) || !( $v['used'] == 1 ) )            {                $formItemData = array( );                $formItemData['ulid'] = $ulid;                $formItemData['itemid'] = $v['itemid'];                $formItemData['data'] = getpar( $_POST['FLOWDATA'], $v['itemid'], "", 1 );                $formItemData['uid'] = $uid;                $formItemData['posttime'] = $GLOBALS['CNOA_TIMESTAMP'];                $formItemData['step'] = $nowStep;                if ( $cacheFile_flow_node[$nowStep]['operatorperson'] == 2 && $cacheFile_flow_node[$nowStep]['operatortype'] == 2 )                {                    $vinfoo = $CNOA_DB->db_getone( "*", $this->table_u_formdata, "WHERE `ulid`='".$ulid."' AND `itemid`='{$v['itemid']}' AND (`uid`='{$uid}' {$sqlEntrust})" );                    if ( !$vinfoo )                    {                        if ( !empty( $formItemData['data'] ) )                        {                            $CNOA_DB->db_insert( $formItemData, $this->table_u_formdata );                        }                    }                }                else                {                    $vinfoo = $CNOA_DB->db_delete( $this->table_u_formdata, "WHERE `ulid`='".$ulid."' AND `itemid`='{$v['itemid']}' AND (`uid`='{$uid}' {$sqlEntrust})" );                    $CNOA_DB->db_insert( $formItemData, $this->table_u_formdata );                }            }        }        $nextStep = $nowStep + 1;        if ( $cacheFile_flow_node[$nextStep]['type'] == "end" )        {            if ( $flowNodeInfo['operatortype'] == 1 )            {                $CNOA_DB->db_update( array(                    "step" => $nextStep,                    "status" => 2                ), $this->table_u_list, "WHERE `ulid`='".$ulid."'" );                $info = $CNOA_DB->db_select( "*", $this->table_u_node, "WHERE `ulid`='".$ulid."' AND `stepid`='{$nowStep}' AND `status`=1 " );                if ( !is_array( $info ) )                {                    $info = array( );                }                foreach ( $info as $v )                {                    notice::deletenotice( $v['noticeid_c'], $v['todoid_c'] );                }                $CNOA_DB->db_delete( $this->table_u_node, "WHERE `ulid`='".$ulid."' AND `stepid`='{$nowStep}' AND `status`=1 " );            }            else            {                $isStepComplete = $CNOA_DB->db_getcount( $this->table_u_node, "WHERE `ulid`='".$ulid."' AND `stepid`='{$nowStep}' AND `status`=1" );                $isStepComplete = $isStepComplete == 0 ? TRUE : FALSE;                if ( $isStepComplete )                {                    $CNOA_DB->db_update( array(                        "step" => $nextStep,                        "status" => 2                    ), $this->table_u_list, "WHERE `ulid`='".$ulid."'" );                }            }            $noticeT = "流程已经办理完毕";            $noticeC = "流程:".$flowInfo['name']." 已办理完毕";            if ( $flowInfo['flowtype'] == "0" )            {                $noticeH = "index.php?app=flow&func=flow&action=user&task=loadPage&from=showflow&ulid=".$ulid;            }            else            {                $noticeH = "index.php?app=flow&func=flow&action=user&module=commonFlow&task=loadPage&from=showflow&ulid=".$ulid;            }            $data['noticeid_c'] = notice::add( $flowInfo['uid'], $noticeT, $noticeC, $noticeH, 0, 5 );        }        else if ( $flowNodeInfo['operatortype'] == 1 )        {            $this->__makeNextStepNode( $flowInfo, $nextUids, $ulid, $nextStep, $cacheFile_flow_node[$nextStep] );            $info = $CNOA_DB->db_select( "*", $this->table_u_node, "WHERE `ulid`='".$ulid."' AND `stepid`='{$nowStep}' AND `status`=1 " );            if ( !is_array( $info ) )            {                $info = array( );            }            foreach ( $info as $v )            {                notice::deletenotice( $v['noticeid_c'], $v['todoid_c'] );            }            $CNOA_DB->db_delete( $this->table_u_node, "WHERE `ulid`='".$ulid."' AND `stepid`='{$nowStep}' AND `status`=1 " );        }        else        {            $isStepComplete = $CNOA_DB->db_getcount( $this->table_u_node, "WHERE `ulid`='".$ulid."' AND `stepid`='{$nowStep}' AND `status`=1" );            $isStepComplete = $isStepComplete == 0 ? TRUE : FALSE;            if ( $flowNodeInfo['sponsor'] == 1 )            {                if ( $isStepComplete )                {                    $this->__makeNextStepNode( $flowInfo, $nextUids, $ulid, $nextStep, $cacheFile_flow_node[$nextStep] );                }                else                {                    $CNOA_DB->db_update( array(                        "nextstepuids" => $nextUids                    ), $this->table_u_node, "WHERE `ulid`='".$ulid."' AND `stepid`='{$nowStep}' AND (`uid`='{$uid}' {$sqlEntrust})" );                }            }            else if ( $isStepComplete )            {                $nextUidsInfo = $CNOA_DB->db_getfield( "nextstepuids", $this->table_u_node, "WHERE `ulid`='".$ulid."' AND `stepid`='{$nowStep}' AND `sponsor`=1" );                $this->__makeNextStepNode( $flowInfo, $nextUidsInfo, $ulid, $nextStep, $cacheFile_flow_node[$nextStep] );            }        }        $this->__eventAdd( $ulid, 2, $nowStep, $cacheFile_flow_node[$nowStep]['name'], $say );        app::loadapp( "main", "systemLogs" )->api_addLogs( "", 75, $flowInfo['name'], "同意流程" );        msg::callback( TRUE, lang( "successopt" ) );    }    private function _disagree( )    {        global $CNOA_DB;        global $CNOA_SESSION;        $uid = $CNOA_SESSION->get( "UID" );        $ulid = getpar( $_POST, "ulid", 0 );        $reason = getpar( $_POST, "reason", "", 1 );        $flowInfo = $CNOA_DB->db_getone( "*", $this->table_u_list, "WHERE `ulid`='".$ulid."'" );        if ( !$flowInfo )        {            msg::callback( FALSE, "无此流程" );        }        if ( $flowInfo['status'] != 1 )        {            msg::callback( FALSE, "当前流程状态不是\"办理中\"，无法退件" );        }        $entrustInfo = $CNOA_DB->db_select( array( "fromuid" ), $this->table_u_entrust, "WHERE `touid`='".$uid."' AND `status`=1 AND `stime`<={$GLOBALS['CNOA_TIMESTAMP']} AND `etime`>={$GLOBALS['CNOA_TIMESTAMP']}" );        if ( !$entrustInfo )        {            $sqlEntrust = "";        }        else        {            $entUids = array( );            foreach ( $entrustInfo as $v )            {                $entUids[] = $v['fromuid'];            }            $sqlEntrust = " OR `uid` IN (".implode( ",", $entUids ).") ";            unset( $entUids );        }        unset( $entrustInfo );        $nowStep = $flowInfo['step'];        $stepInfo = $CNOA_DB->db_getone( "*", $this->table_u_node, "WHERE `ulid`='".$ulid."' AND (`uid`='{$uid}' {$sqlEntrust}) AND `stepid`='{$nowStep}'" );        if ( !$stepInfo )        {            msg::callback( FALSE, "你不是当前流程该步骤的办理人，无权退件" );        }        $CNOA_DB->db_update( array( "status" => 1, "step" => 0 ), $this->table_u_list, "WHERE `ulid`='".$ulid."'" );        $CNOA_DB->db_update( array( "status" => 1 ), $this->table_u_node, "WHERE `ulid`='".$ulid."' AND `stepid`=0" );        $CNOA_DB->db_delete( $this->table_u_node, "WHERE `ulid`='".$ulid."' AND `stepid`>0" );        $cacheFile_flow_node = include( $this->cachePath.( "/flow/user/".$ulid."/flow_node.php" ) );        $firstStepItems = json_decode( $cacheFile_flow_node[0]['formitems'], TRUE );        if ( !is_array( $firstStepItems ) )        {            $firstStepItems = array( );        }        $firstItemsIds = array( );        foreach ( $firstStepItems as $nsiv )        {            if ( !$nsiv['need'] || !$nsiv['must'] || !$nsiv['used'] )            {                $firstItemsIds[] = $nsiv['itemid'];            }        }        $sqlIn = is_array( $firstItemsIds ) && 0 < count( $firstItemsIds ) ? " AND `itemid` NOT IN (".implode( ",", $firstItemsIds ).")" : "";        $CNOA_DB->db_delete( $this->table_u_formdata, "WHERE `ulid`='".$ulid."' {$sqlIn}" );        $noticeT = "你有一个工作审批被退回";        $noticeC = $flowInfo['name']."(".$flowInfo['title'].")";        if ( $flowInfo['flowtype'] == "0" )        {            $noticeH = $this->viewUrl.$ulid;        }        else        {            $noticeH = $this->viewUrlCommonFlow.$ulid;        }        notice::add( $flowInfo['uid'], $noticeT, $noticeC, $noticeH, 0, 5 );        $this->__eventAdd( $ulid, 5, $nowStep, $stepInfo['nodename'], "[退件]<br />".$reason );        notice::donen( $stepInfo['noticeid_c'] );        notice::donet( $stepInfo['todoid_c'] );        app::loadapp( "main", "systemLogs" )->api_addLogs( "", 75, $flowInfo['name'], "不同意流程" );        msg::callback( TRUE, lang( "successopt" ) );    }    private function _show_loadFlowInfo( )    {        global $CNOA_DB;        global $CNOA_SESSION;        $uid = $CNOA_SESSION->get( "UID" );        $ulid = getpar( $_POST, "ulid", 0 );        $this->__addDespanseSayDefault( $uid, $ulid );        $flowInfo = $CNOA_DB->db_getone( "*", $this->table_u_list, "WHERE `ulid`='".$ulid."'" );        if ( $flowInfo !== FALSE )        {            $flowInfo['uname'] = app::loadapp( "main", "user" )->api_getUserTruenameByUid( $flowInfo['uid'] );        }        $flowInfo['posttime'] = date( "Y年m月d日 H时i分", $flowInfo['posttime'] );        $cacheFile = include( $this->cachePath.( "/flow/user/".$flowInfo['ulid']."/" )."flow_node.php" );        $flowInfo['stepText'] = $cacheFile[$flowInfo['step']]['name'];        $flowInfo['allowup'] = $cacheFile[$flowInfo['step']]['allowup'];        $flowInfo['allowdown'] = $cacheFile[$flowInfo['step']]['allowdown'];        if ( $cacheFile[$flowInfo['step']]['type'] == "end" )        {            $flowInfo['allowdown'] = "1";        }        if ( $flowInfo['allowdown'] == "1" )        {            ( );            $fs = new fs( );            $flowInfo['attach'] = json_decode( $flowInfo['attach'], TRUE );            $flowInfo['attachCount'] = !$flowInfo['attach'] ? 0 : count( $flowInfo['attach'] );            $flowInfo['attach'] = $fs->getDownLoadItems4normal( $flowInfo['attach'], TRUE );        }        else        {            $flowInfo['attachCount'] = 0;        }        if ( $flowInfo['status'] == 0 )        {            $flowInfo['statusText'] = "未发布";        }        else if ( $flowInfo['status'] == 1 )        {            $flowInfo['statusText'] = "办理中";        }        else if ( $flowInfo['status'] == 2 )        {            $flowInfo['statusText'] = "已办理";        }        else if ( $flowInfo['status'] == 3 )        {            $flowInfo['statusText'] = "已退件";        }        else if ( $flowInfo['status'] == 4 )        {            $flowInfo['statusText'] = "已撤销";        }        $cacheFile_form = include( $this->cachePath.( "/flow/user/".$ulid."/form.php" ) );        $cacheFile_form_item = include( $this->cachePath.( "/flow/user/".$ulid."/form_item.php" ) );        $cacheFile_flow_node = include( $this->cachePath.( "/flow/user/".$ulid."/flow_node.php" ) );        $formData = $CNOA_DB->db_select( "*", $this->table_u_formdata, "WHERE `ulid`='".$ulid."'" );        $content = app::loadapp( "flow", "flowCommon" )->api_parseFormForView( $cacheFile_form, $formData, $cacheFile_form_item, $flowInfo );        if ( $flowInfo['flowtype'] == 1 )        {            $flowInfo['stepInfo'] = app::loadapp( "flow", "flowUserCommonFlow" )->api_getStepInfo( $flowInfo );        }        $data = array( );        $data['flowInfo'] = $flowInfo;        $data['formInfo'] = $content;        $data['formData'] = $formData;        ( );        $dataStore = new dataStore( );        $dataStore->total = 0;        $dataStore->data = $data;        echo $dataStore->makeJsonData( );        exit( );    }    private function _gotoPrevstep( )    {        global $CNOA_DB;        global $CNOA_SESSION;        $uid = $CNOA_SESSION->get( "UID" );        $ulid = getpar( $_POST, "ulid", 0 );        $reason = getpar( $_POST, "reason", "", 1 );        $flowInfo = $CNOA_DB->db_getone( "*", $this->table_u_list, "WHERE `ulid`='".$ulid."'" );        if ( !$flowInfo )        {            msg::callback( FALSE, "无此流程" );        }        if ( $flowInfo['status'] != 1 )        {            msg::callback( FALSE, "当前流程状态不是\"处理中\"，无法退回" );        }        $entrustInfo = $CNOA_DB->db_select( array( "fromuid" ), $this->table_u_entrust, "WHERE `touid`='".$uid."' AND `status`=1 AND `stime`<={$GLOBALS['CNOA_TIMESTAMP']} AND `etime`>={$GLOBALS['CNOA_TIMESTAMP']}" );        if ( !$entrustInfo )        {            $sqlEntrust = "";        }        else        {            $entUids = array( );            foreach ( $entrustInfo as $v )            {                $entUids[] = $v['fromuid'];            }            $sqlEntrust = " OR `uid` IN (".implode( ",", $entUids ).") ";            unset( $entUids );        }        unset( $entrustInfo );        $nowStep = $flowInfo['step'];        $stepInfo = $CNOA_DB->db_getone( "*", $this->table_u_node, "WHERE `ulid`='".$ulid."' AND (`uid`='{$uid}' {$sqlEntrust}) AND `stepid`='{$nowStep}'" );        if ( !$stepInfo )        {            msg::callback( FALSE, "你不是当前流程该步骤的办理人，无权退回" );        }        if ( $nowStep == 0 )        {            msg::callback( FALSE, "当前流程已是起点步骤，无法再退回上一步" );        }        $CNOA_DB->db_delete( $this->table_u_formdata, "WHERE `ulid`='".$ulid."' AND `step`>='{$nowStep}'" );        $CNOA_DB->db_delete( $this->table_u_node, "WHERE `ulid`='".$ulid."' AND `stepid`='{$nowStep}'" );        $prevStep = $nowStep - 1;        $CNOA_DB->db_update( array( "status" => 1 ), $this->table_u_node, "WHERE `stepid`='".$prevStep."' AND `ulid`='{$ulid}'" );        $prevStepInfo = $CNOA_DB->db_select( "*", $this->table_u_node, "WHERE  (`ulid`='".$ulid."' {$sqlEntrust}) AND `stepid`='{$prevStep}'" );        if ( !is_array( $prevStepInfo ) )        {            $prevStepInfo = array( );        }        $noticeT = "你有一个工作审批被退回,请重新办理";        $noticeC = $flowInfo['name']."(".$flowInfo['title'].")";        if ( $flowInfo['flowtype'] == "0" )        {            $noticeH = $this->viewUrl.$ulid;        }        else        {            $noticeH = $this->viewUrlCommonFlow.$ulid;        }        foreach ( $prevStepInfo as $v )        {            notice::add( $v['uid'], $noticeT, $noticeC, $noticeH, 0, 5 );        }        $this->__eventAdd( $ulid, 6, $nowStep, $stepInfo['nodename'], "[退回上一步]<br />".$reason );        $CNOA_DB->db_update( array(            "step" => $prevStep        ), $this->table_u_list, "WHERE `ulid`='".$ulid."'" );        notice::donen( $stepInfo['noticeid_c'] );        notice::donet( $stepInfo['todoid_c'] );        app::loadapp( "main", "systemLogs" )->api_addLogs( "", 75, $flowInfo['name'], "流程退回上一步" );        msg::callback( TRUE, lang( "successopt" ) );    }    private function _getEntrustJsonData( )    {        global $CNOA_DB;        global $CNOA_SESSION;        $uid = $CNOA_SESSION->get( "UID" );        $entrustInfo = $CNOA_DB->db_getone( "*", $this->table_u_entrust, "WHERE `fromuid`='".$uid."'" );        if ( !$entrustInfo )        {            $entrustInfo = array( );            $entrustInfo['fromuid'] = $uid;            $entrustInfo['touid'] = 0;            $entrustInfo['status'] = 2;            $entrustInfo['stime'] = 0;            $entrustInfo['etime'] = 0;            $CNOA_DB->db_insert( $entrustInfo, $this->table_u_entrust, "WHERE `fromuid`='".$uid."'" );        }        $entrustInfo['expiresText'] = "";        if ( $entrustInfo['touid'] == 0 )        {            $entrustInfo['touname'] = "----";            $entrustInfo['stime'] = "----";            $entrustInfo['etime'] = "----";        }        else        {            if ( $GLOBALS['CNOA_TIMESTAMP'] < $entrustInfo['stime'] )            {                $entrustInfo['expiresText'] = "<span class='cnoa_color_gray'>[未到时间]</span>";            }            if ( $entrustInfo['etime'] < $GLOBALS['CNOA_TIMESTAMP'] )            {                $entrustInfo['expiresText'] = "<span class='cnoa_color_red'>[已过期]</span>";            }            $entrustInfo['touname'] = app::loadapp( "main", "user" )->api_getUserTruenameByUid( $entrustInfo['touid'] );            $entrustInfo['stime'] = date( "Y年m月d日 H:i", $entrustInfo['stime'] );            $entrustInfo['etime'] = date( "Y年m月d日 H:i", $entrustInfo['etime'] );        }        $entrustInfo['statusText'] = $this->entrustType[$entrustInfo['status']];        ( );        $dataStore = new dataStore( );        $dataStore->total = 0;        $dataStore->data = array(            $entrustInfo        );        echo $dataStore->makeJsonData( );        exit( );    }    private function _getAllUserListsInPermitDeptTree( )    {        $GLOBALS['GLOBALS']['user']['permitArea']['area'] = "all";        $userList = app::loadapp( "main", "user" )->api_getAllUserListsInPermitDeptTree( );        echo json_encode( $userList );        exit( );    }    private function _setEntrust( )    {        global $CNOA_DB;        global $CNOA_SESSION;        $uid = $CNOA_SESSION->get( "UID" );        $uname = $CNOA_SESSION->get( "TRUENAME" );        $data = array( );        $data['touid'] = getpar( $_POST, "touid", 0 );        $data['fromuid'] = $uid;        $data['stime'] = strtotime( getpar( $_POST, "stime", "0000-00-00 00:00" ) );        $data['etime'] = strtotime( getpar( $_POST, "etime", "0000-00-00 00:00" ) );        $data['status'] = getpar( $_POST, "status", 0 );        if ( $data['touid'] == $data['fromuid'] )        {            msg::callback( FALSE, "被委托人不能是自己" );        }        if ( $data['etime'] <= $data['stime'] )        {            msg::callback( FALSE, "开始时间不能晚于结束时间" );        }        $noticeT = "你被委托成为工作代理人";        $noticeC = "你被 ".$uname." 授权成为他的工作代理人，委托生效时间为".date( "Y年m月d日", $data['stime'] )."至".date( "Y年m月d日", $data['etime'] )."。";        $noticeH = "";        notice::add( $data['touid'], $noticeT, $noticeC, $noticeH, 0, 5 );        $CNOA_DB->db_update( $data, $this->table_u_entrust, "WHERE `fromuid`='".$uid."'" );        $name = app::loadapp( "main", "user" )->api_getUserNameByUid( $data['touid'] );        app::loadapp( "main", "systemLogs" )->api_addLogs( "update", 76, $name, "委托人" );        msg::callback( TRUE, lang( "successopt" ) );    }    private function _editEntrustLoadForm( )    {        global $CNOA_DB;        global $CNOA_SESSION;        $uid = $CNOA_SESSION->get( "UID" );        $entrustInfo = $CNOA_DB->db_getone( "*", $this->table_u_entrust, "WHERE `fromuid`='".$uid."'" );        if ( !$entrustInfo )        {            msg::callback( FALSE, "无此数据" );        }        if ( $entrustInfo['status'] == 2 )        {            $entrustInfo['stime'] = "";            $entrustInfo['etime'] = "";            $entrustInfo['toName'] = "";            $entrustInfo['touid'] = "";            $entrustInfo['status'] = 1;        }        else        {            $entrustInfo['stime'] = date( "Y-m-d H:i:s", $entrustInfo['stime'] );            $entrustInfo['etime'] = date( "Y-m-d H:i:s", $entrustInfo['etime'] );            $entrustInfo['toName'] = app::loadapp( "main", "user" )->api_getUserTruenameByUid( $entrustInfo['touid'] );        }        ( );        $dataStore = new dataStore( );        $dataStore->total = 0;        $dataStore->data = $entrustInfo;        echo $dataStore->makeJsonData( );        exit( );    }    private function _getEventList( )    {        global $CNOA_DB;        global $CNOA_SESSION;        $ulid = getpar( $_GET, "ulid", 0 );        $dblist = $CNOA_DB->db_select( "*", $this->table_u_event, "WHERE `ulid`='".$ulid."' ORDER BY `eid` ASC" );        if ( $dblist !== FALSE )        {            foreach ( $dblist as $k => $v )            {                $dblist[$k]['typename'] = $this->eventType[$v['type']];                $dblist[$k]['user'] = $v['truename']." (".timeformat( $v['posttime'] ).")";                $dblist[$k]['posttime'] = date( "Y年m月d日 H:i", $v['posttime'] );            }        }        ( );        $dataStore = new dataStore( );        $dataStore->total = 0;        $dataStore->data = $dblist;        echo $dataStore->makeJsonData( );        exit( );    }    private function _getProgressList( )    {        global $CNOA_DB;        global $CNOA_SESSION;        $ulid = getpar( $_GET, "ulid", 0 );        $dblist = $CNOA_DB->db_select( "*", $this->table_u_node, "WHERE `ulid`='".$ulid."' ORDER BY `stepid` ASC" );        if ( $dblist !== FALSE )        {            $uids = array( );            foreach ( $dblist as $k => $v )            {                $uids[] = $v['uid'];                $dblist[$k]['statusText'] = $this->statusType[$v['status']];                $dblist[$k]['stime'] = date( "Y年m月d日 H:i", $v['stime'] );                if ( $v['status'] == 2 && $v['stepid'] != 0 )                {                    $dblist[$k]['utime'] = timeformat2( $v['etime'] - $v['stime'] );                }                else if ( $v['stepid'] != 0 )                {                    $dblist[$k]['utime'] = timeformat2( $GLOBALS['CNOA_TIMESTAMP'] - $v['stime'] );                }                else                {                    $dblist[$k]['utime'] = "----";                }            }            $usersInfo = app::loadapp( "main", "user" )->api_getUserNamesByUids( $uids );            foreach ( $dblist as $k => $v )            {                $dblist[$k]['uname'] = $usersInfo[$v['uid']]['truename'];            }            $flowStatus = $CNOA_DB->db_getfield( "status", $this->table_u_list, "WHERE `ulid`='".$ulid."'" );            if ( $flowStatus == 2 )            {                $arr = array( );                $arr['ulid'] = $ulid;                $arr['stepid'] = 0;                $arr['status'] = 2;                $arr['nodename'] = "结束";                $arr['stime'] = "";                $arr['statusText'] = "已办理";                $arr['utime'] = "----";                $arr['stime'] = "";                $arr['uname'] = "<span style='color:green;'>流程已结束</span>";                $arr['nodetype'] = "end";                $dblist[] = $arr;            }            if ( $flowStatus == 3 )            {                $arr = array( );                $arr['ulid'] = $ulid;                $arr['stepid'] = 0;                $arr['status'] = 2;                $arr['nodename'] = "结束";                $arr['stime'] = "";                $arr['statusText'] = "已退件";                $arr['utime'] = "----";                $arr['stime'] = "";                $arr['uname'] = "<span style='color:green;'>流程已被退回</span>";                $arr['nodetype'] = "end";                $dblist[] = $arr;            }            if ( $flowStatus == 4 )            {                $arr = array( );                $arr['ulid'] = $ulid;                $arr['stepid'] = 0;                $arr['status'] = 2;                $arr['nodename'] = "结束";                $arr['stime'] = "";                $arr['statusText'] = "已撤销";                $arr['utime'] = "----";                $arr['stime'] = "";                $arr['uname'] = "<span style='color:green;'>流程已撤销</span>";                $arr['nodetype'] = "end";                $dblist[] = $arr;            }        }        ( );        $dataStore = new dataStore( );        $dataStore->total = 0;        $dataStore->data = $dblist;        echo $dataStore->makeJsonData( );        exit( );    }    private function _exportExcel( )    {        global $CNOA_SESSION;        $uid = $CNOA_SESSION->get( "UID" );        $stime = strtotime( getpar( $_POST, "stime", "0000-00-00" )." 00:00:00" );        $etime = strtotime( getpar( $_POST, "etime", "0000-00-00" )." 23:59:59" );        $truename = $CNOA_SESSION->get( "TRUENAME" );        if ( $etime <= $stime )        {            msg::callback( FALSE, "结束时间不能早于开始时间" );        }        $fileName = "CNOA.FLOW-".$uid.date( "Ymd", $stime )."-".date( "Ymd", $etime )."-".string::rands( 10, 2 ).".xlsx";        $dataInfo = $this->_getExportExcelData( $stime, $etime );        $excelClass = app::loadapp( "flow", "flowExportExcel" );        $excelClass->init( $dataInfo, $truename, $stime, $etime );        $excelClass->save( CNOA_PATH_FILE."/common/temp/".$fileName );        app::loadapp( "main", "systemLogs" )->api_addLogs( "", 81, "条件：".date( "Y-m-d", $stime )."--".date( "Y-m-d", $etime ), "导出excel报表" );        msg::callback( TRUE, makedownloadicon( "{$GLOBALS['URL_FILE']}/common/temp/".$fileName, $fileName, "img" ) );    }    private function _getExportExcelData( )    {        global $CNOA_DB;        global $CNOA_SESSION;        $uid = $CNOA_SESSION->get( "UID" );        $stime = strtotime( getpar( $_POST, "stime", "0000-00-00" )." 00:00:00" );        $etime = strtotime( getpar( $_POST, "etime", "0000-00-00" )." 23:59:59" );        $where = "WHERE `uid`='".$uid."' AND `status`>0 ";        $where .= "AND `posttime`>='".$stime."' AND `posttime`<='{$etime}' ";        $where .= "ORDER BY `posttime` ASC ";        $dbList = $CNOA_DB->db_select( "*", $this->table_u_list, $where );        if ( !is_array( $dbList ) )        {            $dbList = array( );        }        foreach ( $dbList as $k => $v )        {            $dbList[$k]['posttime'] = date( "Y-m-d H:i", $v['posttime'] );            if ( $v['level'] == 2 )            {                $dbList[$k]['level'] = "重要";            }            else if ( $v['level'] == 3 )            {                $dbList[$k]['level'] = "非常重要";            }            else            {                $dbList[$k]['level'] = "普通";            }            if ( $v['status'] == 0 )            {                $dbList[$k]['step'] = $CNOA_DB->db_getfield( "name", $this->table_list_node, "WHERE `lid`='".$v['lid']."' AND `stepid`='0'" );            }            else            {                $cacheFile = include( $this->cachePath.( "/flow/user/".$v['ulid']."/" )."flow_node.php" );                $dbList[$k]['step'] = $cacheFile[$v['step']]['name'];            }            $dbList[$k]['statusText'] = "";            if ( $v['status'] == 0 )            {                $dbList[$k]['statusText'] = "未发送";            }            else if ( $v['status'] == 1 )            {                $dbList[$k]['statusText'] = "办理中";            }            else if ( $v['status'] == 2 )            {                $dbList[$k]['statusText'] = "已办理";            }            else if ( $v['status'] == 3 )            {                $dbList[$k]['statusText'] = "已退件";            }            else if ( $v['status'] == 4 )            {                $dbList[$k]['statusText'] = "已撤销";            }        }        return $dbList;    }    private function __makeNextStepNode( $flowInfo, $nextUids, $ulid, $nextStep, $nextFlowNodeData )    {        global $CNOA_DB;        global $CNOA_SESSION;        $uid = $CNOA_SESSION->get( "UID" );        $data = array( );        $nextUids = explode( ",", $nextUids );        $data['ulid'] = $ulid;        $data['stepid'] = $nextStep;        $data['status'] = 1;        $data['nodename'] = $nextFlowNodeData['name'];        $data['stime'] = $GLOBALS['CNOA_TIMESTAMP'];        $data['operatortype'] = $nextFlowNodeData['operatortype'];        $data['attachdown'] = $nextFlowNodeData['allowdown'];        $data['attachup'] = $nextFlowNodeData['allowup'];        $data['sponsor'] = 1;        foreach ( $nextUids as $v )        {            $data['uid'] = $v;            $noticeT = "工作流管理";            $noticeC = "你有一个工作需要审批".$flowInfo['name']."(".$flowInfo['title'].")";            if ( $flowInfo['flowtype'] == "0" )            {                $noticeH = $this->viewUrl.$ulid;            }            else            {                $noticeH = $this->viewUrlCommonFlow.$ulid;            }            $data['noticeid_c'] = notice::add( $v, $noticeT, $noticeC, $noticeH, 0, 5 );            $notice['touid'] = $v;            $notice['from'] = 5;            $notice['fromid'] = 0;            $notice['href'] = $noticeH;            $notice['title'] = $noticeC;            $notice['funname'] = "工作流管理";            $notice['move'] = "审批";            $data['todoid_c'] = notice::add2( $notice );            $CNOA_DB->db_insert( $data, $this->table_u_node );            $data['sponsor'] = 0;            if ( $nextFlowNodeData['smsdeal'] == "1" )            {                $this->sendSmsDeal( $ulid, $flowInfo['name'], $v, $flowInfo['reason'] );            }        }        $CNOA_DB->db_update( array(            "step" => $nextStep        ), $this->table_u_list, "WHERE `ulid`='".$ulid."'" );    }    private function __getNumber( $lid )    {        global $CNOA_DB;        global $CNOA_SESSION;        $uid = $CNOA_SESSION->get( "UID" );        $uname = $CNOA_SESSION->get( "TRUENAME" );        $flowInfo = $CNOA_DB->db_getone( "*", $this->table_list, "WHERE `lid`='".$lid."'" );        $flowInfo['number'] = str_replace( "{F}", $flowInfo['name'], $flowInfo['number'] );        $flowInfo['number'] = str_replace( "{U}", $uname, $flowInfo['number'] );        $flowInfo['number'] = str_replace( "{Y}", date( "Y", $GLOBALS['CNOA_TIMESTAMP'] ), $flowInfo['number'] );        $flowInfo['number'] = str_replace( "{M}", date( "m", $GLOBALS['CNOA_TIMESTAMP'] ), $flowInfo['number'] );        $flowInfo['number'] = str_replace( "{D}", date( "d", $GLOBALS['CNOA_TIMESTAMP'] ), $flowInfo['number'] );        $flowInfo['number'] = str_replace( "{H}", date( "H", $GLOBALS['CNOA_TIMESTAMP'] ), $flowInfo['number'] );        $flowInfo['number'] = str_replace( "{I}", date( "i", $GLOBALS['CNOA_TIMESTAMP'] ), $flowInfo['number'] );        $flowInfo['number'] = str_replace( "{S}", date( "s", $GLOBALS['CNOA_TIMESTAMP'] ), $flowInfo['number'] );        $NNNN = preg_replace( "/(.*)\\{([N]{1,})\\}(.*)/i", "\\2", $flowInfo['number'] );        if ( strlen( $NNNN ) < strlen( $flowInfo['number'] ) )        {            $NUMM = str_pad( ++$flowInfo['counter'], strlen( $NNNN ), "0", STR_PAD_LEFT );            $flowInfo['number'] = str_replace( "{".$NNNN."}", $NUMM, $flowInfo['number'] );            $CNOA_DB->db_updateNum( "counter", "+1", $this->table_list, "WHERE `lid`='".$lid."'" );        }        return $flowInfo['number'];    }    private function __getAllUidsInStep( $lid, $stepid )    {        global $CNOA_DB;        global $CNOA_SESSION;        $stepInfo = $CNOA_DB->db_getone( "*", $this->table_list_node, "WHERE `lid`='".$lid."' AND `stepid`='{$stepid}'" );        $operator = json_decode( $stepInfo['operator'], TRUE );        $uids = array( );        $list = array( );        $list['uid'] = array( );        $list['sid'] = array( );        if ( is_array( $operator ) )        {            if ( $operator['user'] )            {                foreach ( $operator['user'] as $v )                {                    $uids[$v['uid']] = $v['uid'];                }            }            unset( $v );            if ( $operator['station'] )            {                foreach ( $operator['station'] as $v )                {                    $uids_tmp = app::loadapp( "main", "user" )->api_getUidsByStationId( $v['sid'] );                    $list['sid'][$v['sid']] = $v['sid'];                    foreach ( $uids_tmp as $v2 )                    {                        $uids[$v2] = $v2;                    }                }            }        }        $list['uid'] = $uids;        return $list;    }    private function __getAllUidsInStepByOperator( $operator )    {        global $CNOA_DB;        global $CNOA_SESSION;        $operator = json_decode( $operator, TRUE );        $uids = array( );        $list = array( );        $list['uid'] = array( );        $list['sid'] = array( );        if ( is_array( $operator ) )        {            if ( $operator['user'] )            {                foreach ( $operator['user'] as $v )                {                    $uids[$v['uid']] = $v['uid'];                }            }            unset( $v );            if ( $operator['station'] )            {                foreach ( $operator['station'] as $v )                {                    $uids_tmp = app::loadapp( "main", "user" )->api_getUidsByStationId( $v['sid'] );                    $list['sid'][$v['sid']] = $v['sid'];                    foreach ( $uids_tmp as $v2 )                    {                        $uids[$v2] = $v2;                    }                }            }        }        $list['uid'] = $uids;        return $list;    }    private function __isUidInStep( $uid, $lid, $stepid )    {        $list = $this->__getAllUidsInStep( $lid, $stepid );        $isUidInStep = FALSE;        $userInfo = app::loadapp( "main", "user" )->api_getUserInfoByUids( $uid );        if ( $stepid == 0 )        {            if ( in_array( $uid, $list['uid'] ) || in_array( $userInfo['stationid'], $list['sid'] ) )            {                $isUidInStep = TRUE;                return $isUidInStep;            }            if ( count( $list['uid'] ) < 1 && count( $list['sid'] ) < 1 )            {                $isUidInStep = TRUE;                return $isUidInStep;            }            $isUidInStep = FALSE;        }        return $isUidInStep;    }    private function __eventAdd( $ulid, $type, $step, $stepname, $say )    {        global $CNOA_DB;        global $CNOA_SESSION;        $uid = $CNOA_SESSION->get( "UID" );        $uname = $CNOA_SESSION->get( "TRUENAME" );        $data = array( );        $data['uid'] = $uid;        $data['uname'] = $uname;        $data['posttime'] = $GLOBALS['CNOA_TIMESTAMP'];        $data['ulid'] = $ulid;        $data['type'] = $type;        $data['step'] = $step;        $data['stepname'] = $stepname;        $data['say'] = $say;        $CNOA_DB->db_insert( $data, $this->table_u_event );    }    private function __checkFlow( $lid )    {        global $CNOA_DB;        global $CNOA_SESSION;        $uid = $CNOA_SESSION->get( "UID" );        $flowNodeInfo = $CNOA_DB->db_select( "*", $this->table_list_node, "WHERE `lid`='".$lid."'" );        if ( !$flowNodeInfo )        {            msg::callback( FALSE, "本流程没有子步骤，不能运行！" );        }        foreach ( $flowNodeInfo as $v )        {            if ( !( $v['type'] != "start" ) && !( $v['type'] != "end" ) )            {                $operator = json_decode( $v['operator'], TRUE );                $uids = array( );                if ( is_array( $operator ) )                {                    if ( $operator['user'] )                    {                        foreach ( $operator['user'] as $v1 )                        {                            $uids[$v1['uid']] = $v1['uid'];                        }                    }                    if ( $operator['station'] )                    {                        foreach ( $operator['station'] as $v2 )                        {                            $uids_tmp = app::loadapp( "main", "user" )->api_getUidsByStationId( $v2['sid'] );                            foreach ( $uids_tmp as $v3 )                            {                                $uids[$v3] = $v3;                            }                        }                    }                }                if ( count( $uids ) < 1 )                {                    msg::callback( FALSE, ( "本流程步骤: \"".$v['name']."\"(第".( $v['stepid'] + 1 ) )."步)<br>经检测没有经办人，流程将不能继续发布，请与管理员联系！" );                }            }        }    }    private function __checkForm( $formid )    {        global $CNOA_DB;        global $CNOA_SESSION;        $uid = $CNOA_SESSION->get( "UID" );        $formList = $CNOA_DB->db_select( "*", $this->table_form_item, "WHERE `fid`='".$formid."'" );        if ( !is_array( $formList ) )        {            $formList = array( );        }        $ready = TRUE;        foreach ( $formList as $v )        {            if ( $v['name'] != "FLOWDATA[".$v['itemid']."]" )            {                $ready = FALSE;            }        }        return $ready;    }    private function __findFlowInfo( )    {        $name = getpar( $_POST, "name" );        $title = getpar( $_POST, "title" );        $stime = getpar( $_POST, "beginTime" );        $etime = getpar( $_POST, "endTime" );        $status = getpar( $_POST, "status" );        $uid = getpar( $_POST, "buildUser" );        $sort = getpar( $_POST, "flowFrom" );        $s = "";        if ( !empty( $uid ) )        {            $s .= " AND `uid`=".$uid;        }        if ( !empty( $sort ) )        {            $s .= " AND `sort`=".$sort;        }        if ( !empty( $status ) || strval( $status ) != "-99" )        {            $s .= " AND `status` = ".$status;        }        if ( !empty( $name ) )        {            $s .= " AND `name` LIKE '%".$name."%'";        }        if ( !empty( $title ) )        {            $s .= " AND `title` LIKE '%".$title."%'";        }        if ( !empty( $stime ) || empty( $etime ) )        {            $stime = strtotime( $stime." 00:00:00" );            $s .= " AND `posttime` >= ".$stime;        }        if ( !empty( $etime ) || empty( $stime ) )        {            $etime = strtotime( $etime." 23:59:59" );            $s .= " AND `posttime` <= ".$etime;        }        if ( !empty( $stime ) || !empty( $etime ) )        {            $stime = strtotime( $stime." 00:00:00" );            $etime = strtotime( $etime." 23:59:59" );            if ( $etime < $stime )            {                msg::callback( FALSE, "查询开始时间不能大于结束时间" );            }            else            {                $s .= " AND `posttime` > ".$stime." AND `posttime` < {$etime}";            }        }        return " ".$s." ";    }    private function _dispenseFlow( )    {        global $CNOA_DB;        global $CNOA_SESSION;        $uid = $CNOA_SESSION->get( "UID" );        $ulid = getpar( $_POST, "ulid", 0 );        $allUids = getpar( $_POST, "allUids", "" );        if ( empty( $allUids ) )        {            msg::callback( FALSE, "无选择要分发的人员" );        }        $ds = $CNOA_DB->db_getone( "*", $this->table_u_list, "WHERE `ulid`='".$ulid."' AND `uid`='{$uid}'" );        $allUids = explode( ",", $allUids );        foreach ( $allUids as $v )        {            $data = array( );            $data['uid'] = $uid;            $data['to_uid'] = $v;            $data['ulid'] = $ulid;            $data['posttime'] = $GLOBALS['CNOA_TIMESTAMP'];            $noticeT = "工作流管理";            $noticeC = "新的待阅的分发工作流";            if ( $ds['flowtype'] == "0" )            {                $noticeH = "index.php?app=flow&func=flow&action=user&task=loadPage&from=showdispenseflow&ulid=".$ulid;            }            else            {                $noticeH = "index.php?app=flow&func=flow&action=user&module=commonFlow&task=loadPage&from=showdispenseflow&ulid=".$ulid;            }            $data['noticeid_c'] = notice::add( $v, $noticeT, $noticeC, $noticeH, 0, 5 );            $notice['touid'] = $v;            $notice['from'] = 5;            $notice['fromid'] = 0;            $notice['href'] = $noticeH;            $notice['title'] = $noticeC;            $notice['funname'] = "工作流管理";            $notice['move'] = "阅读";            $data['todoid_c'] = notice::add2( $notice );            $CNOA_DB->db_insert( $data, "flow_flow_u_dispense" );        }        $temp = app::loadapp( "main", "user" )->api_getUserNamesByUids( $allUids );        foreach ( $temp as $v )        {            $argMan .= "{$v['truename']}, ";        }        $argMan = substr( $argMan, 0, -2 );        app::loadapp( "main", "systemLogs" )->api_addLogs( "", 81, $argMan, "分发流程（".$ds['name']."）" );        msg::callback( TRUE, lang( "successopt" ) );    }    private function _getDispenseJsonData( )    {        global $CNOA_DB;        global $CNOA_SESSION;        $uid = $CNOA_SESSION->get( "UID" );        $isread = getpar( $_GET, "isread", 0 );        $start = getpar( $_POST, "start", 0 );        $rows = 15;        $where = $this->__findFlowInfo( );        $sql = "SELECT * FROM ".tname( $this->table_u_list )." WHERE `ulid` IN (SELECT `ulid` FROM ".tname( "flow_flow_u_dispense" ).( " WHERE `to_uid`='".$uid."' AND `isread`='{$isread}') {$where} " );        $order = " ORDER BY `posttime` DESC LIMIT ".$start.", {$rows} ";        $dbList = array( );        $queryList = $CNOA_DB->query( $sql.$order );        while ( $list = $CNOA_DB->get_array( $queryList ) )        {            $dbList[] = $list;        }        if ( !is_array( $dbList ) )        {            $dbList = array( );        }        foreach ( $dbList as $k => $v )        {            $dbList[$k]['posttime'] = date( "Y-m-d H:i", $v['posttime'] );            if ( $v['level'] == 2 )            {                $dbList[$k]['level'] = "<span class='cnoa_color_orange'>重要</span>";            }            else if ( $v['level'] == 3 )            {                $dbList[$k]['level'] = "<span class='cnoa_color_red'>非常重要</span>";            }            else            {                $dbList[$k]['level'] = "普通";            }            if ( $v['status'] == 0 )            {                $dbList[$k]['step'] = $CNOA_DB->db_getfield( "name", $this->table_list_node, "WHERE `lid`='".$v['lid']."' AND `stepid`='0'" );            }            else            {                $cacheFile = include( $this->cachePath.( "/flow/user/".$v['ulid']."/" )."flow_node.php" );                $dbList[$k]['step'] = $cacheFile[$v['step']]['name'];            }        }        ( );        $dataStore = new dataStore( );        $dataStore->total = $CNOA_DB->db_getcount( $this->table_u_list, $where );        $dataStore->data = $dbList;        echo $dataStore->makeJsonData( );        exit( );    }    private function _show_loadDispenseFlowInfo( )    {        global $CNOA_DB;        global $CNOA_SESSION;        $uid = $CNOA_SESSION->get( "UID" );        $ulid = getpar( $_POST, "ulid", 0 );        $flowInfo = $CNOA_DB->db_getone( "*", $this->table_u_list, "WHERE `ulid`='".$ulid."'" );        if ( $flowInfo !== FALSE )        {            $flowInfo['uname'] = app::loadapp( "main", "user" )->api_getUserTruenameByUid( $flowInfo['uid'] );        }        $flowInfo['posttime'] = date( "Y年m月d日 H时i分", $flowInfo['posttime'] );        $cacheFile = include( $this->cachePath.( "/flow/user/".$flowInfo['ulid']."/" )."flow_node.php" );        $flowInfo['stepText'] = $cacheFile[$flowInfo['step']]['name'];        $flowInfo['allowup'] = $cacheFile[$flowInfo['step']]['allowup'];        $flowInfo['allowdown'] = $cacheFile[$flowInfo['step']]['allowdown'];        if ( $cacheFile[$flowInfo['step']]['type'] == "end" )        {            $flowInfo['allowdown'] = "1";        }        if ( $flowInfo['allowdown'] == "1" )        {            ( );            $fs = new fs( );            $flowInfo['attach'] = json_decode( $flowInfo['attach'], TRUE );            $flowInfo['attachCount'] = !$flowInfo['attach'] ? 0 : count( $flowInfo['attach'] );            $flowInfo['attach'] = $fs->getDownLoadItems4normal( $flowInfo['attach'], TRUE );        }        else        {            $flowInfo['attachCount'] = 0;        }        if ( $flowInfo['status'] == 0 )        {            $flowInfo['statusText'] = "未发布";        }        else if ( $flowInfo['status'] == 1 )        {            $flowInfo['statusText'] = "办理中";        }        else if ( $flowInfo['status'] == 2 )        {            $flowInfo['statusText'] = "已办理";        }        else if ( $flowInfo['status'] == 3 )        {            $flowInfo['statusText'] = "已退件";        }        else if ( $flowInfo['status'] == 4 )        {            $flowInfo['statusText'] = "已撤销";        }        $cacheFile_form = include( $this->cachePath.( "/flow/user/".$ulid."/form.php" ) );        $cacheFile_form_item = include( $this->cachePath.( "/flow/user/".$ulid."/form_item.php" ) );        $cacheFile_flow_node = include( $this->cachePath.( "/flow/user/".$ulid."/flow_node.php" ) );        $formData = $CNOA_DB->db_select( "*", $this->table_u_formdata, "WHERE `ulid`='".$ulid."'" );        $content = app::loadapp( "flow", "flowCommon" )->api_parseFormForView( $cacheFile_form, $formData, $cacheFile_form_item, $flowInfo );        $info = $CNOA_DB->db_getone( "*", "flow_flow_u_dispense", "WHERE `ulid`='".$ulid."' AND `to_uid`='{$uid}'" );        notice::donen( $info['noticeid_c'] );        notice::donet( $info['todoid_c'] );        $CNOA_DB->db_update( array(            "isread" => 1,            "viewtime" => $GLOBALS['CNOA_TIMESTAMP']        ), "flow_flow_u_dispense", "WHERE `ulid`='".$ulid."' AND `to_uid`='{$uid}'" );        $data = array( );        $data['flowInfo'] = $flowInfo;        $data['formInfo'] = $content;        $data['formData'] = $formData;        ( );        $dataStore = new dataStore( );        $dataStore->total = 0;        $dataStore->data = $data;        echo $dataStore->makeJsonData( );        exit( );    }    private function _getReaderList( )    {        global $CNOA_DB;        $ulid = getpar( $_GET, "ulid", 0 );        $dbList = $CNOA_DB->db_select( array( "uid", "viewtime", "to_uid", "isread", "say" ), "flow_flow_u_dispense", "WHERE `ulid`='".$ulid."'" );        if ( !is_array( $dbList ) )        {            $dbList = array( );        }        $listForm = array( );        $uids = array( );        foreach ( $dbList as $v )        {            $list = array( );            $list['viewtime'] = empty( $v['viewtime'] ) ? "----" : date( "Y-m-d G:i:s", $v['viewtime'] );            $list['to_uid'] = $v['to_uid'];            $list['say'] = $v['say'];            $list['isread'] = $v['isread'];            $readerUids[] = $v['to_uid'];            $listForm[] = $list;        }        $userList = app::loadapp( "main", "user" )->api_getUserInfoByUids( $readerUids );        $depList = app::loadapp( "main", "struct" )->api_getArrayList( );        foreach ( $listForm as $k => $v )        {            if ( $v['isread'] == 1 )            {                $listForm[$k]['name'] = "<font color='#FF0000'>".$userList[$v['to_uid']]['truename']."</font>";            }            else            {                $listForm[$k]['name'] = "<font color='#C0C0C0'>".$userList[$v['to_uid']]['truename']."</font>";            }            $listForm[$k]['jid'] = $depList[$userList[$v['to_uid']]['deptId']];        }        ( );        $dataStore = new dataStore( );        $dataStore->data = $listForm;        echo $dataStore->makeJsonData( );        exit( );    }    private function _addDispenseSay( )    {        global $CNOA_DB;        global $CNOA_SESSION;        $uid = $CNOA_SESSION->get( "UID" );        $ulid = getpar( $_POST, "ulid", 0 );        $say = getpar( $_POST, "say", "", 1, 0 );        $info = $CNOA_DB->db_getone( "*", "flow_flow_u_dispense", "WHERE `ulid`='".$ulid."' AND `to_uid`='{$uid}'" );        if ( !$info )        {            msg::callback( FALSE, "此流程没有分发给您，不能发表评阅意见" );        }        $CNOA_DB->db_update( array(            "say" => $say        ), "flow_flow_u_dispense", "WHERE `ulid`='".$ulid."' AND `to_uid`='{$uid}'" );        $name = $CNOA_DB->db_getfield( "name", $this->table_u_list, "WHERE `ulid`='".$ulid."'" );        app::loadapp( "main", "systemLogs" )->api_addLogs( "", 81, $say, "评阅流程（".$name."）" );        msg::callback( TRUE, lang( "successopt" ) );    }    private function _getHuiQianInfo( )    {        global $CNOA_DB;        global $CNOA_SESSION;        $uid = $CNOA_SESSION->get( "UID" );        $ulid = getpar( $_POST, "ulid", 0 );        $step = $CNOA_DB->db_getfield( "step", $this->table_u_list, "WHERE `ulid`='".$ulid."'" );        $listdb = $CNOA_DB->db_select( "*", $this->table_u_huiqian, "WHERE `ulid`='".$ulid."' AND `stepid`='{$step}' AND `uid`='{$uid}'" );        if ( !is_array( $listdb ) )        {            $listdb = array( );        }        $data = array( );        $data['allUids'] = array( );        $data['allUserNames'] = array( );        foreach ( $listdb as $v )        {            $data['allUids'][] = $v['to_uid'];        }        $usersInfo = app::loadapp( "main", "user" )->api_getUserNamesByUids( $data['allUids'] );        foreach ( $data['allUids'] as $k => $v )        {            $data['allUserNames'][] = $usersInfo[$v]['truename'];        }        $data['allUids'] = implode( ",", $data['allUids'] );        $data['allUserNames'] = implode( ",", $data['allUserNames'] );        ( );        $dataStore = new dataStore( );        $dataStore->data = $data;        echo $dataStore->makeJsonData( );        exit( );    }    private function _setHuiQianInfo( )    {        global $CNOA_DB;        global $CNOA_SESSION;        $uid = $CNOA_SESSION->get( "UID" );        $ulid = getpar( $_POST, "ulid", 0 );        $allUserNames = getpar( $_POST, "allUserNames", "" );        $allUids = getpar( $_POST, "allUids", "" );        $flowInfo = $CNOA_DB->db_getone( "*", $this->table_u_list, "WHERE `ulid`='".$ulid."'" );        if ( !empty( $allUids ) )        {            $allUids = explode( ",", $allUids );            if ( 0 < count( $allUids ) && is_array( $allUids ) )            {                $CNOA_DB->db_delete( $this->table_u_huiqian, "WHERE `ulid`='".$ulid."' AND `stepid`='{$flowInfo['step']}' AND `uid`='{$uid}' AND `to_uid` NOT IN (".implode( ",", $allUids ).")" );                $to_uid_list = array( );                $listdb = $CNOA_DB->db_select( array( "to_uid" ), $this->table_u_huiqian, "WHERE `ulid`='".$ulid."' AND `stepid`='{$flowInfo['step']}' AND `uid`='{$uid}'" );                if ( !is_array( $listdb ) )                {                    $listdb = array( );                }                foreach ( $listdb as $v )                {                    $to_uid_list[] = $v['to_uid'];                }                foreach ( $allUids as $v )                {                    if ( !in_array( $v, $to_uid_list ) )                    {                        $data = array( );                        $data['uid'] = $uid;                        $data['to_uid'] = $v;                        $data['ulid'] = $ulid;                        $data['posttime'] = $GLOBALS['CNOA_TIMESTAMP'];                        $data['isread'] = 0;                        $data['stepid'] = $flowInfo['step'];                        $noticeT = "工作流管理";                        $noticeC = "新工作流程会签办理请求[".$flowInfo['name']."]";                        if ( $flowInfo['flowtype'] == "0" )                        {                            $noticeH = $this->viewUrl.$ulid;                        }                        else                        {                            $noticeH = $this->viewUrlCommonFlow.$ulid;                        }                        $data['noticeid_c'] = notice::add( $v, $noticeT, $noticeC, $noticeH, 0, 5, $id );                        $notice['touid'] = $v;                        $notice['from'] = 5;                        $notice['fromid'] = 0;                        $notice['href'] = $noticeH;                        $notice['title'] = $noticeC;                        $notice['funname'] = "工作流管理";                        $notice['move'] = "会签";                        $data['todoid_c'] = notice::add2( $notice );                        $id = $CNOA_DB->db_insert( $data, $this->table_u_huiqian, "WHERE `ulid`='".$ulid."' AND `stepid`='{$flowInfo['step']}' AND `uid`='{$uid}'" );                    }                }            }        }        else        {            $CNOA_DB->db_delete( $this->table_u_huiqian, "WHERE `ulid`='".$ulid."' AND `stepid`='{$flowInfo['step']}' AND `uid`='{$uid}'" );        }        app::loadapp( "main", "systemLogs" )->api_addLogs( "", 75, $allUserNames, "设置流程（".$flowInfo['name']."）会签人员" );        msg::callback( TRUE, lang( "successopt" ) );    }    private function _loadHuiQianInfo( )    {        global $CNOA_DB;        global $CNOA_SESSION;        $uid = $CNOA_SESSION->get( "UID" );        $ulid = getpar( $_POST, "ulid", 0 );        $say = getpar( $_POST, "say", "" );        $flowInfo = $CNOA_DB->db_getone( "*", $this->table_u_list, "WHERE `ulid`='".$ulid."'" );        $dblist = $CNOA_DB->db_getone( "*", $this->table_u_huiqian, "WHERE `ulid`='".$ulid."' AND `stepid`='{$flowInfo['step']}' AND `to_uid`='{$uid}'" );        if ( !is_array( $dblist ) )        {            $dblist = array( );        }        ( );        $dataStore = new dataStore( );        $dataStore->data = $dblist;        echo $dataStore->makeJsonData( );        exit( );    }    private function _submitHuiQianInfo( )    {        global $CNOA_DB;        global $CNOA_SESSION;        $uid = $CNOA_SESSION->get( "UID" );        $ulid = getpar( $_POST, "ulid", 0 );        $say = getpar( $_POST, "say", "" );        $flowInfo = $CNOA_DB->db_getone( "*", $this->table_u_list, "WHERE `ulid`='".$ulid."'" );        $temp = $CNOA_DB->db_getone( "*", $this->table_u_huiqian, "WHERE `ulid`='".$ulid."' AND `stepid`='{$flowInfo['step']}' AND `to_uid`='{$uid}'" );        if ( !$temp )        {            $temp = $CNOA_DB->db_select( "*", $this->table_u_huiqian, "WHERE `ulid`='".$ulid."' AND `to_uid`='{$uid}' AND `stepid`<'{$flowInfo['step']}'" );            if ( !is_array( $temp ) )            {                $temp = array( );            }            foreach ( $temp as $v )            {                notice::donen( $v['noticeid_c'] );                notice::donet( $v['todoid_c'] );            }            msg::callback( FALSE, "会签失败，可能流程已经进入了下一个步骤" );        }        $data = array( );        $data['uid'] = $flowInfo['uid'];        $data['to_uid'] = $uid;        $data['ulid'] = $ulid;        $data['isread'] = 1;        $data['viewtime'] = $GLOBALS['CNOA_TIMESTAMP'];        $data['say'] = $say;        $CNOA_DB->db_update( $data, $this->table_u_huiqian, "WHERE `ulid`='".$ulid."' AND `stepid`='{$flowInfo['step']}' AND `to_uid`='{$uid}'" );        $stepName = $CNOA_DB->db_getfield( "nodename", $this->table_u_node, "WHERE `ulid`='".$ulid."' AND `stepid`='{$flowInfo['step']}'" );        $this->__eventAdd( $ulid, 2, $flowInfo['step'], "{$stepName}", "[会签] ".$data['say'] );        $noticeT = "会签通知";        $noticeC = $CNOA_SESSION->get( "TRUENAME" )." 已会签，办理意见：<br>".$say;        $noticeH = $this->viewUrl.$ulid;        if ( $flowInfo['flowtype'] == "0" )        {            $noticeH = $this->viewUrl.$ulid;        }        else        {            $noticeH = $this->viewUrlCommonFlow.$ulid;        }        $data['noticeid_c'] = notice::add( $temp['uid'], $noticeT, $noticeC, $noticeH, 0, 5 );        notice::donen( $temp['noticeid_c'] );        notice::donet( $temp['todoid_c'] );        msg::callback( TRUE, lang( "successopt" ) );    }    private function _setZhuangbanInfo( )    {        global $CNOA_DB;        global $CNOA_SESSION;        $uid = $CNOA_SESSION->get( "UID" );        $uname = $CNOA_SESSION->get( "TRUENAME" );        $ulid = getpar( $_POST, "ulid", 0 );        $tuid = getpar( $_POST, "uid", 0 );        $say = getpar( $_POST, "say", "", 1, 0 );        $tuname = app::loadapp( "main", "user" )->api_getUserTruenameByUid( $tuid );        $flowInfo = $CNOA_DB->db_getone( "*", $this->table_u_list, "WHERE `ulid`='".$ulid."'" );        $CNOA_DB->db_update( array(            "uid" => $tuid        ), $this->table_u_node, "WHERE `ulid`='".$ulid."' AND `stepid`='{$flowInfo['step']}'" );        $stepName = $CNOA_DB->db_getfield( "nodename", $this->table_u_node, "WHERE `ulid`='".$ulid."' AND `stepid`='{$flowInfo['step']}'" );        $this->__eventAdd( $ulid, 2, $flowInfo['step'], "{$stepName}", "[转办] 转办给 ".$tuname."办理, 转办内容：<br>".addslashes( $say ) );        $noticeT = "{$uname} 把工作流转给你办理";        $noticeC = $flowInfo['name'];        if ( $flowInfo['flowtype'] == "0" )        {            $noticeH = $this->viewUrl.$ulid;        }        else        {            $noticeH = $this->viewUrlCommonFlow.$ulid;        }        notice::add( $tuid, $noticeT, $noticeC, $noticeH, 0, 5, 0 );        app::loadapp( "main", "systemLogs" )->api_addLogs( "", 75, $tuname, "转办工作流（".$flowInfo['name']."）" );        msg::callback( TRUE, lang( "successopt" ) );    }    private function __addDespanseSayDefault( $uid, $ulid )    {        global $CNOA_DB;        $info = $CNOA_DB->db_getone( "*", "flow_flow_u_dispense", "WHERE `ulid`='".$ulid."' AND `to_uid`='{$uid}'" );        if ( $info['say'] == "" )        {            notice::donen( $info['noticeid_c'] );            notice::donet( $info['todoid_c'] );            $CNOA_DB->db_update( array(                "isread" => 1,                "viewtime" => $GLOBALS['CNOA_TIMESTAMP'],                "say" => "已阅"            ), "flow_flow_u_dispense", "WHERE `ulid`='".$ulid."' AND `to_uid`='{$uid}'" );        }    }    private function _getAutoSaveFormData( )    {        global $CNOA_DB;        global $CNOA_SESSION;        $uid = $CNOA_SESSION->get( "UID" );        $lid = getpar( $_POST, "lid", 0 );        $info = $CNOA_DB->db_getone( "*", "flow_flow_form_auto_save", "WHERE `lid`='".$lid."' AND `uid`='{$uid}'" );        ( );        $dataStore = new dataStore( );        $dataStore->data = $info['data'];        echo $dataStore->makeJsonData( );        exit( );    }    private function _setAutoSaveFormData( )    {        global $CNOA_DB;        global $CNOA_SESSION;        $uid = $CNOA_SESSION->get( "UID" );        $lid = getpar( $_POST, "lid", "" );        $data = addslashes( $_POST['data'] );        $info = $CNOA_DB->db_getone( "*", "flow_flow_form_auto_save", "WHERE `lid`='".$lid."' AND `uid`='{$uid}'" );        if ( $info === FALSE )        {            $CNOA_DB->db_insert( array(                "lid" => $lid,                "uid" => $uid,                "data" => $data            ), "flow_flow_form_auto_save" );        }        else        {            $CNOA_DB->db_update( array(                "data" => $data            ), "flow_flow_form_auto_save", "WHERE `lid`='".$lid."' AND `uid`='{$uid}'" );        }        msg::callback( TRUE, lang( "successopt" ) );    }    public function api_replaceHTML( $html, $data )    {        $this->replaceHTML( $html, $data );    }    public function api_getProgressList( $ulid )    {        $GLOBALS['_GET']['ulid'] = $ulid;        $this->_getProgressList( );    }    public function api_takeViewFlowList( )    {        global $CNOA_DB;        global $CNOA_SESSION;        $uid = $CNOA_SESSION->get( "UID" );        $dblist = $CNOA_DB->db_select( array( "ulid", "title", "name" ), $this->table_u_list, "WHERE `uid`=".$uid );        if ( !is_array( $dblist ) )        {            $dblist = array( );        }        foreach ( $dblist as $k => $v )        {            if ( !empty( $v['title'] ) )            {                $add = "( ".$v['title']." )";            }            $dblist[$k]['title'] = $v['name'].$add;            unset( $add );        }        ( );        $dataStore = new dataStore( );        $dataStore->data = $dblist;        echo $dataStore->makeJsonData( );        exit( );    }    public function api_show_loadFlowInfo( )    {        $this->_show_loadFlowInfo( );    }    public function api_GetFlowName( $ulid )    {        global $CNOA_DB;        return $CNOA_DB->db_getfield( "name", $this->table_u_list, "WHERE `ulid`=".$ulid );    }    public function api_getMyFlowJsonData( )    {        $this->_getMyFlowJsonData( );    }    public function api_getMyFlowJsonDataByulid( $ulid )    {        global $CNOA_DB;        global $CNOA_SESSION;        $uid = $CNOA_SESSION->get( "UID" );        $start = getpar( $_POST, "start", 0 );        $rows = 15;        $sort = intval( getpar( $_POST, "sort", 0 ) );        if ( $sort == 0 )        {            $where = "WHERE `uid`='".$uid."' ";        }        else        {            $where = "WHERE `sort`='".$sort."' AND `uid`='{$uid}'";        }        $where .= $this->__findFlowInfo( );        if ( !is_array( $ulid ) )        {            $where .= "AND `ulid` = '".$ulid."' ";        }        else if ( !empty( $ulid ) )        {            $where .= "AND `ulid` IN (".implode( ",", $ulid ).") ";        }        else        {            return array( );        }        $order = "ORDER BY `posttime` DESC LIMIT ".$start.", {$rows} ";        $dbList = $CNOA_DB->db_select( "*", $this->table_u_list, $where.$order );        if ( !is_array( $dbList ) )        {            $dbList = array( );        }        foreach ( $dbList as $k => $v )        {            $dbList[$k]['posttime'] = date( "Y-m-d H:i", $v['posttime'] );            if ( $v['level'] == 2 )            {                $dbList[$k]['level'] = "<span class='cnoa_color_orange'>重要</span>";            }            else if ( $v['level'] == 3 )            {                $dbList[$k]['level'] = "<span class='cnoa_color_red'>非常重要</span>";            }            else            {                $dbList[$k]['level'] = "普通";            }            if ( $v['status'] == 0 )            {                $dbList[$k]['step'] = $CNOA_DB->db_getfield( "name", $this->table_list_node, "WHERE `lid`='".$v['lid']."' AND `stepid`='0'" );            }            else            {                $cacheFile = include( $this->cachePath.( "/flow/user/".$v['ulid']."/" )."flow_node.php" );                $dbList[$k]['step'] = $cacheFile[$v['step']]['name'];            }        }        return $dbList;    }    public function api_eventAdd( $ulid, $type, $step, $stepName, $say )    {        $this->__eventAdd( $ulid, $type, $step, $stepName, $say );    }    public function __clearAutoSaveFormData( $lid )    {        global $CNOA_DB;        global $CNOA_SESSION;        $uid = $CNOA_SESSION->get( "UID" );        $CNOA_DB->db_delete( "flow_flow_form_auto_save", "WHERE `lid`='".$lid."' AND `uid`='{$uid}'" );    }}?>